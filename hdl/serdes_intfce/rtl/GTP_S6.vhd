----------------------------------------------------
----------------------------------------------------
-- THIS FILE WAS GENERATED BY VISUAL ELITE
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
----------------------------------------------------
----------------------------------------------------
-- GNU LESSER GENERAL PUBLIC LICENSE
----------------------------------------------------
-- This source file is free software; you can redistribute it and/or modify it
-- under the terms of the GNU Lesser General Public License as published by the
-- Free Software Foundation; either version 2.1 of the License, or (at your
-- option) any later version. This source is distributed in the hope that it
-- will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
-- of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-- See the GNU Lesser General Public License for more details. You should have
-- received a copy of the GNU Lesser General Public License along with this
-- source; if not, download it from http://www.gnu.org/licenses/lgpl-2.1.html
----------------------------------------------------
----------------------------------------------------
--
--  Library Name :  GTP
--  Unit    Name :  GTP_S6
--  Unit    Type :  Block Diagram
--
------------------------------------------------------

library ieee;
use ieee.STD_LOGIC_1164.all;
use ieee.NUMERIC_STD.all;
library work;
use work.GTP_TILE_PKG.all;
entity GTP_S6 is
  generic (
           G_RATE : GTP_RATE_TYPE := GBPS_1_0
           );
  port (
        TxStr0 : in std_logic;
        TxStr1 : in std_logic;
        RstDone0 : out std_logic;
        RxLOS0 : out std_logic_vector(1 downto 0 );
        RstDone1 : out std_logic;
        RxLOS1 : out std_logic_vector(1 downto 0 );
        Valid0 : in std_logic;
        Valid1 : in std_logic;
        PRBSTxEna0 : in std_logic_vector(2 downto 0 );
        PRBSTxEna1 : in std_logic_vector(2 downto 0 );
        PRBSCntReset0 : in std_logic;
        PRBSCntReset1 : in std_logic;
        GTPRst : in std_logic;
        RxData0 : out std_logic_vector(15 downto 0 );
        CDRRst0 : in std_logic;
        CDRRst1 : in std_logic;
        RxData1 : out std_logic_vector(15 downto 0 );
        RxIsKTest0 : out std_logic_vector(1 downto 0 );
        RxIsKTest1 : out std_logic_vector(1 downto 0 );
        Faults_NotInTable0 : out std_logic;
        Faults_NotInTable1 : out std_logic;
        RxClkCorCnt0 : out std_logic_vector(2 downto 0 );
        RxClkCorCnt1 : out std_logic_vector(2 downto 0 );
        GTPClk : in std_logic;
        RxRst0 : in std_logic;
        RxRst1 : in std_logic;
        UserClk : in std_logic;
        Rx0_N : in std_logic;
        Rx0_P : in std_logic;
        TxRst0 : in std_logic;
        TxRst1 : in std_logic;
        RxCommaMisalign0 : out std_logic;
        RxCommaMisalign1 : out std_logic;
        TxMkr0 : in std_logic;
        TxMkr1 : in std_logic;
        PRBSErrCnt0 : out std_logic_vector(15 downto 0 );
        UserClk2 : in std_logic;
        PRBSErrCnt1 : out std_logic_vector(15 downto 0 );
        Tx0_N : out std_logic;
        Tx0_P : out std_logic;
        Rx1_N : in std_logic;
        RxBufStatus0 : out std_logic_vector(2 downto 0 );
        RxBufStatus1 : out std_logic_vector(2 downto 0 );
        Rx1_P : in std_logic;
        RxDoubleComma0 : out std_logic;
        RxDoubleComma1 : out std_logic;
        RxDataTest0 : out std_logic_vector(15 downto 0 );
        RxDataTest1 : out std_logic_vector(15 downto 0 );
        RxBufRst0 : in std_logic;
        RxBufRst1 : in std_logic;
        RxComma0 : out std_logic;
        RxComma1 : out std_logic;
        IsAligned0 : out std_logic;
        IsAligned1 : out std_logic;
        RxStr0 : out std_logic;
        RxStr1 : out std_logic;
        AlignRx0 : in std_logic;
        AlignRx1 : in std_logic;
        Tx1_N : out std_logic;
        Tx1_P : out std_logic;
        TxData0 : in std_logic_vector(15 downto 0 );
        TxData1 : in std_logic_vector(15 downto 0 );
        PRBSRxEna0 : in std_logic_vector(2 downto 0 );
        Faults_DispError0 : out std_logic;
        PRBSRxEna1 : in std_logic_vector(2 downto 0 );
        Faults_DispError1 : out std_logic
        );


end GTP_S6;


use work.all;
architecture GTP_S6 of GTP_S6 is

  signal RXNOTINTABLE0_OUT : std_logic_vector(1 downto 0 );
  signal RXENCOMMAALIGN1_IN : std_logic;
  signal RXCHARISK0_OUT : std_logic_vector(1 downto 0 );
  signal RXBYTEISALIGNED0_OUT : std_logic;
  signal RXDISPERR0_OUT : std_logic_vector(1 downto 0 );
  signal TXDATA0_IN : std_logic_vector(19 downto 0 );
  signal TERCNT0 : std_logic;
  signal TERCNT1 : std_logic;
  signal RXCHARISK1_OUT : std_logic_vector(1 downto 0 );
  signal KMode0 : std_logic_vector(1 downto 0 );
  signal KMode1 : std_logic_vector(1 downto 0 );
  signal PRBSErr0 : std_logic;
  signal PRBSErr1 : std_logic;
  signal RXBYTEISALIGNED1_OUT : std_logic;
  signal RXENCOMMAALIGN0_IN : std_logic;
  signal Z : std_logic;
  signal RXNOTINTABLE1_OUT : std_logic_vector(1 downto 0 );
  signal RXDATA1_OUT : std_logic_vector(15 downto 0 );
  signal RXDISPERR1_OUT : std_logic_vector(1 downto 0 );
  signal TXDATA1_IN : std_logic_vector(19 downto 0 );
  signal CEN0 : std_logic;
  signal CEN1 : std_logic;
  signal RXDATA0_OUT : std_logic_vector(15 downto 0 );
  component GTP_TILE_S6
      generic (
               G_RATE : GTP_RATE_TYPE := GBPS_1_0
               );
      port (
            CLK00_IN : in std_logic;
            CLK01_IN : in std_logic;
            GTPRESET0_IN : in std_logic;
            GTPRESET1_IN : in std_logic;
            PLLLKDET0_OUT : out std_logic;
            PLLLKDET1_OUT : out std_logic;
            RESETDONE0_OUT : out std_logic;
            RESETDONE1_OUT : out std_logic;
            RXCHARISCOMMA0_OUT : out std_logic_vector(1 downto 0 );
            RXCHARISCOMMA1_OUT : out std_logic_vector(1 downto 0 );
            RXCHARISK0_OUT : out std_logic_vector(1 downto 0 );
            RXCHARISK1_OUT : out std_logic_vector(1 downto 0 );
            RXDISPERR0_OUT : out std_logic_vector(1 downto 0 );
            RXDISPERR1_OUT : out std_logic_vector(1 downto 0 );
            RXNOTINTABLE0_OUT : out std_logic_vector(1 downto 0 );
            RXNOTINTABLE1_OUT : out std_logic_vector(1 downto 0 );
            RXCHANBONDSEQ0_OUT : out std_logic;
            RXCHANBONDSEQ1_OUT : out std_logic;
            RXCHANISALIGNED0_OUT : out std_logic;
            RXCHANISALIGNED1_OUT : out std_logic;
            RXCHANREALIGN0_OUT : out std_logic;
            RXCHANREALIGN1_OUT : out std_logic;
            RXCHBONDMASTER0_IN : in std_logic;
            RXCHBONDMASTER1_IN : in std_logic;
            RXCHBONDSLAVE0_IN : in std_logic;
            RXCHBONDSLAVE1_IN : in std_logic;
            RXENCHANSYNC0_IN : in std_logic;
            RXENCHANSYNC1_IN : in std_logic;
            RXCLKCORCNT0_OUT : out std_logic_vector(2 downto 0 );
            RXCLKCORCNT1_OUT : out std_logic_vector(2 downto 0 );
            RXBYTEISALIGNED0_OUT : out std_logic;
            RXBYTEISALIGNED1_OUT : out std_logic;
            RXENMCOMMAALIGN0_IN : in std_logic;
            RXENMCOMMAALIGN1_IN : in std_logic;
            RXENPCOMMAALIGN0_IN : in std_logic;
            RXENPCOMMAALIGN1_IN : in std_logic;
            PRBSCNTRESET0_IN : in std_logic;
            PRBSCNTRESET1_IN : in std_logic;
            RXENPRBSTST0_IN : in std_logic_vector(2 downto 0 );
            RXENPRBSTST1_IN : in std_logic_vector(2 downto 0 );
            RXPRBSERR0_OUT : out std_logic;
            RXPRBSERR1_OUT : out std_logic;
            RXDATA0_OUT : out std_logic_vector(15 downto 0 );
            RXDATA1_OUT : out std_logic_vector(15 downto 0 );
            RXRESET0_IN : in std_logic;
            RXRESET1_IN : in std_logic;
            RXUSRCLK0_IN : in std_logic;
            RXUSRCLK1_IN : in std_logic;
            RXUSRCLK20_IN : in std_logic;
            RXUSRCLK21_IN : in std_logic;
            RXCDRRESET0_IN : in std_logic;
            RXCDRRESET1_IN : in std_logic;
            RXN0_IN : in std_logic;
            RXN1_IN : in std_logic;
            RXP0_IN : in std_logic;
            RXP1_IN : in std_logic;
            RXBUFRESET0_IN : in std_logic;
            RXBUFRESET1_IN : in std_logic;
            RXBUFSTATUS0_OUT : out std_logic_vector(2 downto 0 );
            RXBUFSTATUS1_OUT : out std_logic_vector(2 downto 0 );
            RXLOSSOFSYNC0_OUT : out std_logic_vector(1 downto 0 );
            RXLOSSOFSYNC1_OUT : out std_logic_vector(1 downto 0 );
            GTPCLKOUT0_OUT : out std_logic_vector(1 downto 0 );
            GTPCLKOUT1_OUT : out std_logic_vector(1 downto 0 );
            TXDATA0_IN : in std_logic_vector(19 downto 0 );
            TXDATA1_IN : in std_logic_vector(19 downto 0 );
            TXOUTCLK0_OUT : out std_logic;
            TXOUTCLK1_OUT : out std_logic;
            TXRESET0_IN : in std_logic;
            TXRESET1_IN : in std_logic;
            TXUSRCLK0_IN : in std_logic;
            TXUSRCLK1_IN : in std_logic;
            TXUSRCLK20_IN : in std_logic;
            TXUSRCLK21_IN : in std_logic;
            TXN0_OUT : out std_logic;
            TXN1_OUT : out std_logic;
            TXP0_OUT : out std_logic;
            TXP1_OUT : out std_logic;
            TXENPRBSTST0_IN : in std_logic_vector(2 downto 0 );
            TXENPRBSTST1_IN : in std_logic_vector(2 downto 0 );
            TXPRBSFORCEERR0_IN : in std_logic;
            TXPRBSFORCEERR1_IN : in std_logic
            );
  end component;
  component GTP_RxLogic
      port (
            GTPData : in std_logic_vector(15 downto 0 );
            RxData : out std_logic_vector(15 downto 0 );
            GTPIsK : in std_logic_vector(1 downto 0 );
            UsrClk : in std_logic;
            RxStr : out std_logic;
            RxCommaMisalign : out std_logic;
            RxDoubleComma : out std_logic;
            RxComma : out std_logic;
            Valid : in std_logic
            );
  end component;
  component RSFF
      port (
            Clk : in std_logic;
            Set : in std_logic;
            Clr : in std_logic;
            Rst : in std_logic := '0';
            Q : out std_logic
            );
  end component;
  component GTP_16b20bEnc
      port (
            In_16b : in std_logic_vector(15 downto 0 );
            Clk : in std_logic;
            Out_20b : out std_logic_vector(19 downto 0 );
            KMode : in std_logic_vector(1 downto 0 );
            Str : in std_logic
            );
  end component;
  signal visual_C67_cur_state : std_logic_vector(16 - 1 downto 0 );
  signal visual_C67_next_state : std_logic_vector(16 - 1 downto 0 );
  signal visual_C67_next_count : std_logic_vector(16 - 1 downto 0 );
  signal visual_C67_en_state : std_logic_vector(16 - 1 downto 0 );
  signal visual_C67_cnto : std_logic_vector(16 - 1 downto 0 );
  signal visual_C67_tc : std_logic;
  signal visual_C68_cur_state : std_logic_vector(16 - 1 downto 0 );
  signal visual_C68_next_state : std_logic_vector(16 - 1 downto 0 );
  signal visual_C68_next_count : std_logic_vector(16 - 1 downto 0 );
  signal visual_C68_en_state : std_logic_vector(16 - 1 downto 0 );
  signal visual_C68_cnto : std_logic_vector(16 - 1 downto 0 );
  signal visual_C68_tc : std_logic;

  -- Start Configuration Specification
  -- ++ for all : GTP_TILE_S6 use entity work.GTP_TILE_S6(RTL);
  -- ++ for all : GTP_RxLogic use entity work.GTP_RxLogic(GTP_RxLogic);
  -- ++ for all : RSFF use entity work.RSFF(V1);
  -- ++ for all : GTP_16b20bEnc use entity work.GTP_16b20bEnc(GTP_16b20bEnc);
  -- End Configuration Specification

begin

  B_GTP_Dual_X0Y0: GTP_TILE_S6
    generic map (G_RATE => G_RATE
                 )
    port map (
              CLK00_IN => GTPClk,
              CLK01_IN => GTPClk,
              GTPRESET0_IN => GTPRst,
              GTPRESET1_IN => GTPRst,
              PLLLKDET0_OUT => open,
              PLLLKDET1_OUT => open,
              RESETDONE0_OUT => RstDone0,
              RESETDONE1_OUT => RstDone1,
              RXCHARISCOMMA0_OUT => open,
              RXCHARISCOMMA1_OUT => open,
              RXCHARISK0_OUT => RXCHARISK0_OUT(1 downto 0),
              RXCHARISK1_OUT => RXCHARISK1_OUT(1 downto 0),
              RXDISPERR0_OUT => RXDISPERR0_OUT(1 downto 0),
              RXDISPERR1_OUT => RXDISPERR1_OUT(1 downto 0),
              RXNOTINTABLE0_OUT => RXNOTINTABLE0_OUT(1 downto 0),
              RXNOTINTABLE1_OUT => RXNOTINTABLE1_OUT(1 downto 0),
              RXCHANBONDSEQ0_OUT => open,
              RXCHANBONDSEQ1_OUT => open,
              RXCHANISALIGNED0_OUT => open,
              RXCHANISALIGNED1_OUT => open,
              RXCHANREALIGN0_OUT => open,
              RXCHANREALIGN1_OUT => open,
              RXCHBONDMASTER0_IN => Z,
              RXCHBONDMASTER1_IN => Z,
              RXCHBONDSLAVE0_IN => Z,
              RXCHBONDSLAVE1_IN => Z,
              RXENCHANSYNC0_IN => Z,
              RXENCHANSYNC1_IN => Z,
              RXCLKCORCNT0_OUT => RxClkCorCnt0(2 downto 0),
              RXCLKCORCNT1_OUT => RxClkCorCnt1(2 downto 0),
              RXBYTEISALIGNED0_OUT => RXBYTEISALIGNED0_OUT,
              RXBYTEISALIGNED1_OUT => RXBYTEISALIGNED1_OUT,
              RXENMCOMMAALIGN0_IN => RXENCOMMAALIGN0_IN,
              RXENMCOMMAALIGN1_IN => RXENCOMMAALIGN1_IN,
              RXENPCOMMAALIGN0_IN => RXENCOMMAALIGN0_IN,
              RXENPCOMMAALIGN1_IN => RXENCOMMAALIGN1_IN,
              PRBSCNTRESET0_IN => PRBSErr0,
              PRBSCNTRESET1_IN => PRBSErr1,
              RXENPRBSTST0_IN => PRBSRxEna0(2 downto 0),
              RXENPRBSTST1_IN => PRBSRxEna1(2 downto 0),
              RXPRBSERR0_OUT => PRBSErr0,
              RXPRBSERR1_OUT => PRBSErr1,
              RXDATA0_OUT => RXDATA0_OUT(15 downto 0),
              RXDATA1_OUT => RXDATA1_OUT(15 downto 0),
              RXRESET0_IN => RxRst0,
              RXRESET1_IN => RxRst1,
              RXUSRCLK0_IN => UserClk,
              RXUSRCLK1_IN => UserClk,
              RXUSRCLK20_IN => UserClk2,
              RXUSRCLK21_IN => UserClk2,
              RXCDRRESET0_IN => CDRRst0,
              RXCDRRESET1_IN => CDRRst1,
              RXN0_IN => Rx0_N,
              RXN1_IN => Rx1_N,
              RXP0_IN => Rx0_P,
              RXP1_IN => Rx1_P,
              RXBUFRESET0_IN => RxBufRst0,
              RXBUFRESET1_IN => RxBufRst1,
              RXBUFSTATUS0_OUT => RxBufStatus0(2 downto 0),
              RXBUFSTATUS1_OUT => RxBufStatus1(2 downto 0),
              RXLOSSOFSYNC0_OUT => RxLOS0(1 downto 0),
              RXLOSSOFSYNC1_OUT => RxLOS1(1 downto 0),
              GTPCLKOUT0_OUT => open,
              GTPCLKOUT1_OUT => open,
              TXDATA0_IN => TXDATA0_IN(19 downto 0),
              TXDATA1_IN => TXDATA1_IN(19 downto 0),
              TXOUTCLK0_OUT => open,
              TXOUTCLK1_OUT => open,
              TXRESET0_IN => TxRst0,
              TXRESET1_IN => TxRst1,
              TXUSRCLK0_IN => UserClk,
              TXUSRCLK1_IN => UserClk,
              TXUSRCLK20_IN => UserClk2,
              TXUSRCLK21_IN => UserClk2,
              TXN0_OUT => Tx0_N,
              TXN1_OUT => Tx1_N,
              TXP0_OUT => Tx0_P,
              TXP1_OUT => Tx1_P,
              TXENPRBSTST0_IN => PRBSTxEna0(2 downto 0),
              TXENPRBSTST1_IN => PRBSTxEna1(2 downto 0),
              TXPRBSFORCEERR0_IN => Z,
              TXPRBSFORCEERR1_IN => Z
              );

  B_GTP_RxLogic_0: GTP_RxLogic
    port map (
              GTPData => RXDATA0_OUT(15 downto 0),
              RxData => RxData0(15 downto 0),
              GTPIsK => RXCHARISK0_OUT(1 downto 0),
              UsrClk => UserClk2,
              RxStr => RxStr0,
              RxCommaMisalign => RxCommaMisalign0,
              RxDoubleComma => RxDoubleComma0,
              RxComma => RxComma0,
              Valid => Valid0
              );

  B_GTP_RxLogic_1: GTP_RxLogic
    port map (
              GTPData => RXDATA1_OUT(15 downto 0),
              RxData => RxData1(15 downto 0),
              GTPIsK => RXCHARISK1_OUT(1 downto 0),
              UsrClk => UserClk2,
              RxStr => RxStr1,
              RxCommaMisalign => RxCommaMisalign1,
              RxDoubleComma => RxDoubleComma1,
              RxComma => RxComma1,
              Valid => Valid1
              );

  B_AlignRSFF_0: RSFF
    port map (
              Clk => UserClk2,
              Set => AlignRx0,
              Clr => RXBYTEISALIGNED0_OUT,
              Rst => open,
              Q => RXENCOMMAALIGN0_IN
              );

  B_AlignRSFF_1: RSFF
    port map (
              Clk => UserClk2,
              Set => AlignRx1,
              Clr => RXBYTEISALIGNED1_OUT,
              Rst => open,
              Q => RXENCOMMAALIGN1_IN
              );

  B_GTP_16b20b_0: GTP_16b20bEnc
    port map (
              In_16b => TxData0(15 downto 0),
              Clk => UserClk2,
              Out_20b => TXDATA0_IN(19 downto 0),
              KMode => KMode0(1 downto 0),
              Str => TxStr0
              );

  B_GTP_16b20b_1: GTP_16b20bEnc
    port map (
              In_16b => TxData1(15 downto 0),
              Clk => UserClk2,
              Out_20b => TXDATA1_IN(19 downto 0),
              KMode => KMode1(1 downto 0),
              Str => TxStr1
              );

  PRBSErrCnt0(15 downto 0) <= (visual_C67_cur_state);

  TERCNT0 <= (visual_C67_tc);
  visual_C67_cnto <= std_logic_vector(to_unsigned(65535 ,
                                  (16)));

  visual_C67_tc <= '1' when visual_C67_cnto = visual_C67_cur_state
                       else '0';


  visual_C67_en_state <= visual_C67_next_count
                       when CEN0 = '1'
                       else visual_C67_cur_state;

  visual_C67_next_state <= visual_C67_en_state;

  process (UserClk2)
  begin
  if (UserClk2'event and UserClk2 = '1') then
    if (PRBSCntReset0 = '1') then
      visual_C67_cur_state <= (others => '0');
   else
       visual_C67_cur_state <= visual_C67_next_state;
   end if;
  end if;
  end process;

  process (visual_C67_cur_state )
  variable plus_minus_one : unsigned(16 - 1 downto 0);

  begin
    plus_minus_one :=  "0000000000000001" ;
    visual_C67_next_count <= std_logic_vector(unsigned(visual_C67_cur_state) +
   plus_minus_one);

  end process;

   CEN0 <= (not TERCNT0) and ( PRBSErr0);

  PRBSErrCnt1(15 downto 0) <= (visual_C68_cur_state);

  TERCNT1 <= (visual_C68_tc);
  visual_C68_cnto <= std_logic_vector(to_unsigned(65535 ,
                                  (16)));

  visual_C68_tc <= '1' when visual_C68_cnto = visual_C68_cur_state
                       else '0';


  visual_C68_en_state <= visual_C68_next_count
                       when CEN1 = '1'
                       else visual_C68_cur_state;

  visual_C68_next_state <= visual_C68_en_state;

  process (UserClk2)
  begin
  if (UserClk2'event and UserClk2 = '1') then
    if (PRBSCntReset1 = '1') then
      visual_C68_cur_state <= (others => '0');
   else
       visual_C68_cur_state <= visual_C68_next_state;
   end if;
  end if;
  end process;

  process (visual_C68_cur_state )
  variable plus_minus_one : unsigned(16 - 1 downto 0);

  begin
    plus_minus_one :=  "0000000000000001" ;
    visual_C68_next_count <= std_logic_vector(unsigned(visual_C68_cur_state) +
   plus_minus_one);

  end process;

   CEN1 <= (not TERCNT1) and ( PRBSErr1);

   Faults_DispError0 <= ( RXDISPERR0_OUT(1)) or ( RXDISPERR0_OUT(0));

   Faults_DispError1 <= ( RXDISPERR1_OUT(1)) or ( RXDISPERR1_OUT(0));

   Faults_NotInTable0 <= ( RXNOTINTABLE0_OUT(1)) or ( RXNOTINTABLE0_OUT(0));

   Faults_NotInTable1 <= ( RXNOTINTABLE1_OUT(1)) or ( RXNOTINTABLE1_OUT(0));

  Z <= '0';

  IsAligned0 <= RXBYTEISALIGNED0_OUT;

  IsAligned1 <= RXBYTEISALIGNED1_OUT;

  process (UserClk2)
  begin
  if (UserClk2'event and UserClk2 = '1') then
        RxDataTest0(15 downto 0) <= (RXDATA0_OUT(15 downto 0));


  end if;
  end process;

  process (UserClk2)
  begin
  if (UserClk2'event and UserClk2 = '1') then
        RxIsKTest0(1 downto 0) <= (RXCHARISK0_OUT(1 downto 0));


  end if;
  end process;

  process (UserClk2)
  begin
  if (UserClk2'event and UserClk2 = '1') then
        RxDataTest1(15 downto 0) <= (RXDATA1_OUT(15 downto 0));


  end if;
  end process;

  process (UserClk2)
  begin
  if (UserClk2'event and UserClk2 = '1') then
        RxIsKTest1(1 downto 0) <= (RXCHARISK1_OUT(1 downto 0));


  end if;
  end process;

  KMode0(1) <= TxMkr0;
  KMode0(0) <= Z;

  KMode1(1) <= TxMkr1;
  KMode1(0) <= Z;
end GTP_S6;


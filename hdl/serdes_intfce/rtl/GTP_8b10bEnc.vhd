----------------------------------------------------
----------------------------------------------------
-- THIS FILE WAS GENERATED BY VISUAL ELITE
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
----------------------------------------------------
----------------------------------------------------
-- GNU LESSER GENERAL PUBLIC LICENSE
----------------------------------------------------
-- This source file is free software; you can redistribute it and/or modify it
-- under the terms of the GNU Lesser General Public License as published by the
-- Free Software Foundation; either version 2.1 of the License, or (at your
-- option) any later version. This source is distributed in the hope that it
-- will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
-- of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-- See the GNU Lesser General Public License for more details. You should have
-- received a copy of the GNU Lesser General Public License along with this
-- source; if not, download it from http://www.gnu.org/licenses/lgpl-2.1.html
----------------------------------------------------
----------------------------------------------------
--
--  Library Name :  GTP
--  Unit    Name :  GTP_8b10bEnc
--  Unit    Type :  Block Diagram
--
------------------------------------------------------

library ieee;
use ieee.STD_LOGIC_1164.all;
use ieee.NUMERIC_STD.all;
entity GTP_8b10bEnc is
  port (
        In_8b : in std_logic_vector(7 downto 0 );
        In_RunDisp : in std_logic;
        Out_RunDisp : out std_logic;
        Out_10b : out std_logic_vector(9 downto 0 )
        );


end GTP_8b10bEnc;


use work.all;
architecture GTP_8b10bEnc of GTP_8b10bEnc is

  signal DispFlip_6b : std_logic;
  signal Loc_Out_6b : std_logic_vector(5 downto 0 );
  signal Loc_RunDisp : std_logic;
  signal DispFlip_4b : std_logic;
  signal Loc_RunDisp_4b : std_logic;
  signal Out_4b : std_logic_vector(3 downto 0 );
  signal Loc_RunDisp_6b : std_logic;
  signal Loc_Out_4b : std_logic_vector(3 downto 0 );
  signal DatFlip_6b : std_logic;
  signal DatFlip_4b : std_logic;
  signal Out_6b : std_logic_vector(5 downto 0 );
  component GTP_5b6bTable
      port (
            In5b : in std_logic_vector(4 downto 0 );
            Out6b : out std_logic_vector(5 downto 0 );
            DatFlip : out std_logic;
            DispFlip : out std_logic
            );
  end component;
  component GTP_3b4bTable
      port (
            In3b : in std_logic_vector(2 downto 0 );
            Out4b : out std_logic_vector(3 downto 0 );
            DatFlip : out std_logic;
            DispFlip : out std_logic
            );
  end component;
  component GTP_Dx7Table
      port (
            In4b : in std_logic_vector(3 downto 0 );
            Out4b : out std_logic_vector(3 downto 0 );
            In6b : in std_logic_vector(5 downto 0 )
            );
  end component;

  -- Start Configuration Specification
  -- ++ for all : GTP_5b6bTable use entity work.GTP_5b6bTable(GTP_5b6bTable);
  -- ++ for all : GTP_3b4bTable use entity work.GTP_3b4bTable(GTP_3b4bTable);
  -- ++ for all : GTP_Dx7Table use entity work.GTP_Dx7Table(GTP_Dx7Table);
  -- End Configuration Specification

begin

  B_5b6bTable: GTP_5b6bTable
    port map (
              In5b => In_8b(4 downto 0),
              Out6b => Out_6b(5 downto 0),
              DatFlip => DatFlip_6b,
              DispFlip => DispFlip_6b
              );

  B_3b4bTable: GTP_3b4bTable
    port map (
              In3b => In_8b(7 downto 5),
              Out4b => Out_4b(3 downto 0),
              DatFlip => DatFlip_4b,
              DispFlip => DispFlip_4b
              );

  B_Dx7Table: GTP_Dx7Table
    port map (
              In4b => Loc_Out_4b(3 downto 0),
              Out4b => Out_10b(3 downto 0),
              In6b => Loc_Out_6b(5 downto 0)
              );

  process (Out_6b , Loc_RunDisp_6b)
   begin
     case Loc_RunDisp_6b is
       when '0' =>
         Loc_Out_6b(5 downto 0) <=  Out_6b(5 downto 0);
       when others =>
         Loc_Out_6b(5 downto 0) <= not Out_6b(5 downto 0);
     end case;
   end process;

  process (Out_4b , Loc_RunDisp_4b)
   begin
     case Loc_RunDisp_4b is
       when '0' =>
         Loc_Out_4b(3 downto 0) <=  Out_4b(3 downto 0);
       when others =>
         Loc_Out_4b(3 downto 0) <= not Out_4b(3 downto 0);
     end case;
   end process;

  process (In_RunDisp , DispFlip_6b)
   begin
     case DispFlip_6b is
       when '0' =>
         Loc_RunDisp <=  In_RunDisp;
       when others =>
         Loc_RunDisp <= not In_RunDisp;
     end case;
   end process;

   Loc_RunDisp_6b <= ( In_RunDisp) and ( DatFlip_6b);

  process (Loc_RunDisp , DispFlip_4b)
   begin
     case DispFlip_4b is
       when '0' =>
         Out_RunDisp <=  Loc_RunDisp;
       when others =>
         Out_RunDisp <= not Loc_RunDisp;
     end case;
   end process;

   Loc_RunDisp_4b <= ( Loc_RunDisp) and ( DatFlip_4b);

  Out_10b(9 downto 4) <= Loc_Out_6b(5 downto 0);
end GTP_8b10bEnc;


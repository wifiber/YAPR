----------------------------------------------------
----------------------------------------------------
-- THIS FILE WAS GENERATED BY VISUAL ELITE
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
----------------------------------------------------
----------------------------------------------------
-- GNU LESSER GENERAL PUBLIC LICENSE
----------------------------------------------------
-- This source file is free software; you can redistribute it and/or modify it
-- under the terms of the GNU Lesser General Public License as published by the
-- Free Software Foundation; either version 2.1 of the License, or (at your
-- option) any later version. This source is distributed in the hope that it
-- will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
-- of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-- See the GNU Lesser General Public License for more details. You should have
-- received a copy of the GNU Lesser General Public License along with this
-- source; if not, download it from http://www.gnu.org/licenses/lgpl-2.1.html
----------------------------------------------------
----------------------------------------------------
--
--  Library Name :  CommonVisual
--  Unit    Name :  PulseSync
--  Unit    Type :  Block Diagram
--
------------------------------------------------------

library ieee;
use ieee.STD_LOGIC_1164.all;
entity PulseSync is
  port (
        ClkIn : in std_logic;
        ClkOutHSout : out std_logic;
        PulseOut : out std_logic;
        Rst : in std_logic;
        PulseIn : in std_logic;
        ClkOut : in std_logic
        );


end PulseSync;


use work.all;
architecture PulseSync of PulseSync is

  signal PuInSynOut : std_logic;
  signal PuInMem : std_logic;
  signal ClrPuInMem : std_logic;
  signal PuIn : std_logic;
  component DffxN
      generic (
               N : INTEGER := 2
               );
      port (
            Clk : in std_logic;
            E : in std_logic := '1';
            E1 : in std_logic := '1';
            Rst : in std_logic;
            D : in std_logic;
            Q : out std_logic
            );
  end component;
  component PosEdge
      port (
            Clk : in std_logic;
            SigIn : in std_logic;
            PEdg : out std_logic
            );
  end component;
  component RSFF
      port (
            Clk : in std_logic;
            Set : in std_logic;
            Clr : in std_logic;
            Rst : in std_logic := '0';
            Q : out std_logic
            );
  end component;

  -- Start Configuration Specification
  -- ++ for all : DffxN use entity work.DffxN(DffxN);
  -- ++ for all : PosEdge use entity work.PosEdge(V1);
  -- ++ for all : RSFF use entity work.RSFF(V1);
  -- End Configuration Specification

begin

  C1: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => ClkOut,
              E => open,
              E1 => open,
              Rst => Rst,
              D => PuInMem,
              Q => PuInSynOut
              );

  C2: PosEdge
    port map (
              Clk => ClkIn,
              SigIn => PulseIn,
              PEdg => PuIn
              );

  C3: PosEdge
    port map (
              Clk => ClkOut,
              SigIn => PuInSynOut,
              PEdg => PulseOut
              );

  C4: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => ClkIn,
              E => open,
              E1 => open,
              Rst => Rst,
              D => PuInSynOut,
              Q => ClrPuInMem
              );

  C5: RSFF
    port map (
              Clk => ClkIn,
              Set => PuIn,
              Clr => ClrPuInMem,
              Rst => Rst,
              Q => PuInMem
              );

  ClkOutHSout <= PuInSynOut;
end PulseSync;


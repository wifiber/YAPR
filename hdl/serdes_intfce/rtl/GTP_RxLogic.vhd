----------------------------------------------------
----------------------------------------------------
-- THIS FILE WAS GENERATED BY VISUAL ELITE
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
----------------------------------------------------
----------------------------------------------------
-- GNU LESSER GENERAL PUBLIC LICENSE
----------------------------------------------------
-- This source file is free software; you can redistribute it and/or modify it
-- under the terms of the GNU Lesser General Public License as published by the
-- Free Software Foundation; either version 2.1 of the License, or (at your
-- option) any later version. This source is distributed in the hope that it
-- will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
-- of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-- See the GNU Lesser General Public License for more details. You should have
-- received a copy of the GNU Lesser General Public License along with this
-- source; if not, download it from http://www.gnu.org/licenses/lgpl-2.1.html
----------------------------------------------------
----------------------------------------------------
--
--  Library Name :  GTP
--  Unit    Name :  GTP_RxLogic
--  Unit    Type :  Block Diagram
--
------------------------------------------------------

library ieee;
use ieee.STD_LOGIC_1164.all;
use ieee.NUMERIC_STD.all;
entity GTP_RxLogic is
  port (
        GTPData : in std_logic_vector(15 downto 0 );
        RxData : out std_logic_vector(15 downto 0 );
        GTPIsK : in std_logic_vector(1 downto 0 );
        UsrClk : in std_logic;
        RxStr : out std_logic;
        RxCommaMisalign : out std_logic;
        RxDoubleComma : out std_logic;
        RxComma : out std_logic;
        Valid : in std_logic
        );


end GTP_RxLogic;


architecture GTP_RxLogic of GTP_RxLogic is

  signal IsK0 : std_logic;
  signal IsDoubleK : std_logic;
  signal IsK1 : std_logic;
  signal IsKMis : std_logic;
  signal IsD : std_logic;
  signal IsK : std_logic;
  signal IsValidKMis : std_logic;
  signal IsValidK : std_logic;
  signal IsValidDoubleK : std_logic;
  signal IsValidD : std_logic;


begin

  process (UsrClk)
  begin
  if (UsrClk'event and UsrClk = '1') then
        RxData(15 downto 0) <= (GTPData(15 downto 0));


  end if;
  end process;

  process (UsrClk)
  begin
  if (UsrClk'event and UsrClk = '1') then
        RxStr <= (IsValidD);


  end if;
  end process;

   IsValidD <= ( IsD) and ( Valid);

  process (UsrClk)
  begin
  if (UsrClk'event and UsrClk = '1') then
        RxComma <= (IsValidK);


  end if;
  end process;

   IsValidK <= ( IsK) and ( Valid);

   IsD <= (not IsK0) and (not IsK1);

   IsK <= ( IsK0) and (not IsK1);

  IsK0 <= GTPIsK(0);
  IsK1 <= GTPIsK(1);

   IsKMis <= (not IsK0) and ( IsK1);

  process (UsrClk)
  begin
  if (UsrClk'event and UsrClk = '1') then
        RxCommaMisalign <= (IsValidKMis);


  end if;
  end process;

   IsValidKMis <= ( IsKMis) and ( Valid);

   IsDoubleK <= ( IsK0) and ( IsK1);

   IsValidDoubleK <= ( IsDoubleK) and ( Valid);

  process (UsrClk)
  begin
  if (UsrClk'event and UsrClk = '1') then
        RxDoubleComma <= (IsValidDoubleK);


  end if;
  end process;
end GTP_RxLogic;


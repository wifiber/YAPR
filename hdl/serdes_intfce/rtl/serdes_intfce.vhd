----------------------------------------------------
----------------------------------------------------
-- THIS FILE WAS GENERATED BY VISUAL ELITE
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
----------------------------------------------------
----------------------------------------------------
-- GNU LESSER GENERAL PUBLIC LICENSE
----------------------------------------------------
-- This source file is free software; you can redistribute it and/or modify it
-- under the terms of the GNU Lesser General Public License as published by the
-- Free Software Foundation; either version 2.1 of the License, or (at your
-- option) any later version. This source is distributed in the hope that it
-- will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
-- of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-- See the GNU Lesser General Public License for more details. You should have
-- received a copy of the GNU Lesser General Public License along with this
-- source; if not, download it from http://www.gnu.org/licenses/lgpl-2.1.html
----------------------------------------------------
----------------------------------------------------
--
--  Library Name :  serdes_intfce
--  Unit    Name :  serdes_intfce
--  Unit    Type :  Block Diagram
--
------------------------------------------------------

library ieee;
use ieee.STD_LOGIC_1164.all;
use ieee.NUMERIC_STD.all;
library work;
use work.GTP_TILE_PKG.all;
library work;
use work.serdes_intfce_pkg.all;
entity serdes_intfce is
  generic (
           G_RATE : GTP_RATE_TYPE := GBPS_1_0
           );
  port (
        wb_csr_dat_o : out std_logic_vector(31 downto 0 );
        sfp_los_i : in std_logic;
        led_red_o : out std_logic;
        dio_led_top_o : out std_logic;
        clk_gtp_userclk_i : in std_logic;
        dio_i : in std_logic_vector(4 downto 0 );
        wb_ddr_adr_o : out std_logic_vector(31 downto 0 );
        dio_clk_i : in std_logic;
        irq_o : out std_logic_vector(1 downto 0 );
        dio_o : out std_logic_vector(4 downto 0 );
        wb_csr_adr_i : in std_logic_vector(3 downto 0 );
        sfp_rx_p_i : in std_logic;
        rst_n_i : in std_logic;
        dio_term_en_o : out std_logic_vector(4 downto 0 );
        clk_wb_i : in std_logic;
        dio_prsnt_n_i : in std_logic;
        wb_csr_stall_o : out std_logic;
        clk_gtp_refclk_i : in std_logic;
        wb_ddr_sel_o : out std_logic_vector(3 downto 0 );
        wb_eic_adr_i : in std_logic_vector(1 downto 0 );
        wb_eic_int_o : out std_logic;
        wb_csr_sel_i : in std_logic_vector(3 downto 0 );
        wb_eic_ack_o : out std_logic;
        wb_eic_cyc_i : in std_logic;
        dio_led_bot_o : out std_logic;
        sfp_tx_n_o : out std_logic;
        wb_eic_dat_i : in std_logic_vector(31 downto 0 );
        wb_eic_dat_o : out std_logic_vector(31 downto 0 );
        dio_onewire_b : inout std_logic;
        led_grn_o : out std_logic;
        wb_ddr_stb_o : out std_logic;
        wb_csr_stb_i : in std_logic;
        wb_csr_we_i : in std_logic;
        dio_oe_n_o : out std_logic_vector(4 downto 0 );
        sfp_prsnt_n_i : in std_logic;
        sfp_tx_disable_o : out std_logic;
        sfp_rx_n_i : in std_logic;
        clk_gtp_userclk2_i : in std_logic;
        wb_eic_stall_o : out std_logic;
        wb_eic_stb_i : in std_logic;
        wb_ddr_stall_i : in std_logic;
        wb_ddr_ack_i : in std_logic;
        wb_ddr_cyc_o : out std_logic;
        wb_csr_cyc_i : in std_logic;
        wb_csr_ack_o : out std_logic;
        wb_ddr_we_o : out std_logic;
        wb_eic_sel_i : in std_logic_vector(3 downto 0 );
        wb_ddr_dat_o : out std_logic_vector(31 downto 0 );
        wb_eic_we_i : in std_logic;
        sfp_tx_p_o : out std_logic;
        wb_csr_dat_i : in std_logic_vector(31 downto 0 )
        );


end serdes_intfce;


use work.all;
architecture serdes_intfce of serdes_intfce is

  signal sfp_ok_pos : std_logic;
  signal ddr_addr_cnt : std_logic_vector(25 downto 0 );
  signal irq_acq_wb : std_logic;
  signal irq_acq_wb_en : std_logic;
  signal ddr_marker_addr : std_logic_vector(26 downto 0 );
  signal sfp_los : std_logic;
  signal rx_buf_rst : std_logic;
  signal test_mem_dat_wb : std_logic_vector(31 downto 0 );
  signal tx_rst : std_logic;
  signal fifo_rd_empty : std_logic;
  signal ddr_wr : std_logic;
  signal led_in_test : std_logic_vector(1 downto 0 );
  signal not_sync : std_logic;
  signal prbs_ena_bus : std_logic_vector(2 downto 0 );
  signal sfp_prsnt : std_logic;
  signal cur_marker_addr : std_logic_vector(26 downto 0 );
  signal ddr_str : std_logic;
  signal sfp_ok_n : std_logic;
  signal rst : std_logic;
  signal mkr_type : std_logic;
  signal fifo_full_latched : std_logic;
  signal sfp_ins_align : std_logic;
  signal khz1 : std_logic;
  signal test_mem_addr_wb : std_logic_vector(12 downto 0 );
  signal prbs_err_cnt_wb : std_logic_vector(15 downto 0 );
  signal hz15_div : std_logic_vector(7 downto 0 );
  signal ddr_frev_tag : std_logic;
  signal sfp_ok : std_logic;
  signal rx_rst : std_logic;
  signal clr_prbs_err_cnt_wb : std_logic;
  signal cdr_rst : std_logic;
  signal fifo_wr_full : std_logic;
  signal z16 : std_logic_vector(15 downto 0 );
  signal is_comma : std_logic;
  signal dc_mkr : std_logic;
  signal masked_addr : std_logic_vector(25 downto 0 );
  signal is_comma_1 : std_logic;
  signal is_comma_2 : std_logic;
  signal is_comma_3 : std_logic;
  signal loc_ddr_marker : std_logic_vector(1 downto 0 );
  signal clr_prbs_err_cnt : std_logic;
  signal fifo_din : std_logic_vector(17 downto 0 );
  signal rx_clk_corr : std_logic_vector(2 downto 0 );
  signal led_test_syn : std_logic;
  signal loc_align_0 : std_logic;
  signal is_double_comma : std_logic;
  signal loc_align_1 : std_logic;
  signal loc_align_2 : std_logic;
  signal zero_25b : std_logic_vector(25 downto 0 );
  signal gtp_rst : std_logic;
  signal rst_done_syn : std_logic;
  signal rst_done : std_logic;
  signal acq_page_addr : std_logic_vector(31 downto 0 );
  signal irq_acq : std_logic;
  signal loc_irq_acq : std_logic;
  signal ddr_marker : std_logic;
  signal align_rx_wb : std_logic;
  signal rx_buf_status_wb : std_logic_vector(2 downto 0 );
  signal rst_userclk2 : std_logic;
  signal rx_los : std_logic_vector(1 downto 0 );
  signal rx_los_wb : std_logic_vector(1 downto 0 );
  signal line_rate : std_logic_vector(31 downto 0 );
  signal prbs_ena_wb : std_logic;
  signal z1 : std_logic;
  signal z3 : std_logic_vector(2 downto 0 );
  signal fifo_dout : std_logic_vector(35 downto 0 );
  signal loc_fifo_full : std_logic;
  signal mkr_type_wb : std_logic;
  signal khz1_div : std_logic_vector(16 downto 0 );
  signal dio_prsnt_i : std_logic;
  signal loc_sfp_ok : std_logic;
  signal ddr_dat_swapped : std_logic_vector(31 downto 0 );
  signal is_double_comma_1 : std_logic;
  signal test_mem_dat : std_logic_vector(31 downto 0 );
  signal align_rx : std_logic;
  signal loc_gtp_rst : std_logic;
  signal is_comma_or_double_1 : std_logic;
  signal tx_str : std_logic;
  signal cur_page_addr : std_logic_vector(25 downto 0 );
  signal rx_clk_corr_wb : std_logic_vector(2 downto 0 );
  signal acq_page_size : std_logic_vector(31 downto 0 );
  signal acq_page_size_d : std_logic_vector(31 downto 0 );
  signal hz15 : std_logic;
  signal rx_buf_status : std_logic_vector(2 downto 0 );
  signal led_in : std_logic_vector(1 downto 0 );
  signal ddr_dat : std_logic_vector(15 downto 0 );
  signal fmc_prsnt : std_logic;
  signal loc_ddr_dat : std_logic_vector(31 downto 0 );
  signal prbs_err_cnt : std_logic_vector(15 downto 0 );
  signal tst_wr_ena : std_logic;
  signal rst_align : std_logic;
  signal tx_data : std_logic_vector(15 downto 0 );
  signal tst_wr_ena_wb : std_logic;
  signal acq_page_size_m1 : std_logic_vector(25 downto 0 );
  signal tx_mkr : std_logic;
  signal loc_align_rx : std_logic;
  signal dio_out_0 : std_logic;
  signal dio_out_1 : std_logic;
  signal dio_out_2 : std_logic;
  signal c3_mkr : std_logic;
  signal dio_out_3 : std_logic;
  signal dio_out_4 : std_logic;
  signal led_out : std_logic_vector(1 downto 0 );
  signal data_valid : std_logic;
  signal clr_faults : std_logic;
  signal irq_trig : std_logic;
  signal acq_marker_addr : std_logic_vector(31 downto 0 );
  signal gtp_aligned : std_logic;
  signal prbs_ena : std_logic;
  signal led_test : std_logic;
  signal test_mem_addr : std_logic_vector(12 downto 0 );
  signal sfp_prsnt_i : std_logic;
  signal gtp_aligned_wb : std_logic;
  component DffxN
      generic (
               N : INTEGER := 2
               );
      port (
            Clk : in std_logic;
            E : in std_logic := '1';
            E1 : in std_logic := '1';
            Rst : in std_logic;
            D : in std_logic;
            Q : out std_logic
            );
  end component;
  component serdes_intfce_csr
      port (
            rst_n_i : in std_logic;
            clk_sys_i : in std_logic;
            wb_adr_i : in std_logic_vector(3 downto 0 );
            wb_dat_i : in std_logic_vector(31 downto 0 );
            wb_dat_o : out std_logic_vector(31 downto 0 );
            wb_cyc_i : in std_logic;
            wb_sel_i : in std_logic_vector(3 downto 0 );
            wb_stb_i : in std_logic;
            wb_we_i : in std_logic;
            wb_ack_o : out std_logic;
            wb_stall_o : out std_logic;
            serdes_intfce_ctrl_tx_dis_o : out std_logic;
            serdes_intfce_ctrl_prbs_ena_o : out std_logic;
            serdes_intfce_ctrl_tst_wr_ena_o : out std_logic;
            serdes_intfce_ctrl_cnt_clr_o : out std_logic;
            serdes_intfce_ctrl_mkr_type_o : out std_logic;
            serdes_intfce_ctrl_led_test_o : out std_logic;
            serdes_intfce_ctrl_clr_faults_o : out std_logic;
            serdes_intfce_ctrl_gtp_rst_o : out std_logic;
            serdes_intfce_ctrl_rx_rst_o : out std_logic;
            serdes_intfce_ctrl_tx_rst_o : out std_logic;
            serdes_intfce_ctrl_cdr_rst_o : out std_logic;
            serdes_intfce_ctrl_align_o : out std_logic;
            serdes_intfce_ctrl_rx_buf_rst_o : out std_logic;
            serdes_intfce_sta_sfp_los_i : in std_logic;
            serdes_intfce_sta_sfp_prsnt_i : in std_logic;
            serdes_intfce_sta_fmc_prsnt_i : in std_logic;
            serdes_intfce_sta_rx_stat_i : in std_logic_vector(2 downto 0 );
            serdes_intfce_sta_rx_los_i : in std_logic_vector(1 downto 0 );
            serdes_intfce_sta_rx_clk_corr_i : in std_logic_vector(2 downto 0 );
            serdes_intfce_sta_aligned_i : in std_logic;
            serdes_intfce_sta_fifo_full_i : in std_logic;
            serdes_intfce_prbs_err_cnt_i : in std_logic_vector(15 downto 0 );
            serdes_intfce_test_mem_addr_o : out std_logic_vector(12 downto 0 );
            serdes_intfce_test_mem_dat_data_i : in std_logic_vector(15 downto 0
            );
            serdes_intfce_test_mem_dat_isk_i : in std_logic_vector(1 downto 0 );
            serdes_intfce_test_mem_dat_marker_i : in std_logic;
            serdes_intfce_line_rate_i : in std_logic_vector(31 downto 0 );
            serdes_intfce_acq_page_size_o : out std_logic_vector(31 downto 0 );
            serdes_intfce_acq_page_addr_i : in std_logic_vector(31 downto 0 );
            serdes_intfce_acq_marker_addr_i : in std_logic_vector(31 downto 0 )
            );
  end component;
  component PulseSync
      port (
            ClkIn : in std_logic;
            ClkOutHSout : out std_logic;
            PulseOut : out std_logic;
            Rst : in std_logic;
            PulseIn : in std_logic;
            ClkOut : in std_logic
            );
  end component;
  component serdes_intfce_eic
      port (
            rst_n_i : in std_logic;
            clk_sys_i : in std_logic;
            wb_adr_i : in std_logic_vector(1 downto 0 );
            wb_dat_i : in std_logic_vector(31 downto 0 );
            wb_dat_o : out std_logic_vector(31 downto 0 );
            wb_cyc_i : in std_logic;
            wb_sel_i : in std_logic_vector(3 downto 0 );
            wb_stb_i : in std_logic;
            wb_we_i : in std_logic;
            wb_ack_o : out std_logic;
            wb_stall_o : out std_logic;
            wb_int_o : out std_logic;
            irq_trig_i : in std_logic;
            irq_acq_i : in std_logic
            );
  end component;
  component SRFF
      port (
            Clk : in std_logic;
            Set : in std_logic;
            Clr : in std_logic;
            Rst : in std_logic := '0';
            Q : out std_logic
            );
  end component;
  component ddr_sync_fifo
      port (
            rst : in std_logic;
            wr_clk : in std_logic;
            rd_clk : in std_logic;
            din : in std_logic_vector(17 downto 0 );
            wr_en : in std_logic;
            rd_en : in std_logic;
            dout : out std_logic_vector(35 downto 0 );
            full : out std_logic;
            empty : out std_logic;
            rd_data_count : out std_logic_vector(5 downto 0 )
            );
  end component;
  component GTP_S6
      generic (
               G_RATE : GTP_RATE_TYPE := GBPS_1_0
               );
      port (
            TxStr0 : in std_logic;
            TxStr1 : in std_logic;
            RstDone0 : out std_logic;
            RxLOS0 : out std_logic_vector(1 downto 0 );
            RstDone1 : out std_logic;
            RxLOS1 : out std_logic_vector(1 downto 0 );
            Valid0 : in std_logic;
            Valid1 : in std_logic;
            PRBSTxEna0 : in std_logic_vector(2 downto 0 );
            PRBSTxEna1 : in std_logic_vector(2 downto 0 );
            PRBSCntReset0 : in std_logic;
            PRBSCntReset1 : in std_logic;
            GTPRst : in std_logic;
            RxData0 : out std_logic_vector(15 downto 0 );
            CDRRst0 : in std_logic;
            CDRRst1 : in std_logic;
            RxData1 : out std_logic_vector(15 downto 0 );
            RxIsKTest0 : out std_logic_vector(1 downto 0 );
            RxIsKTest1 : out std_logic_vector(1 downto 0 );
            Faults_NotInTable0 : out std_logic;
            Faults_NotInTable1 : out std_logic;
            RxClkCorCnt0 : out std_logic_vector(2 downto 0 );
            RxClkCorCnt1 : out std_logic_vector(2 downto 0 );
            GTPClk : in std_logic;
            RxRst0 : in std_logic;
            RxRst1 : in std_logic;
            UserClk : in std_logic;
            Rx0_N : in std_logic;
            Rx0_P : in std_logic;
            TxRst0 : in std_logic;
            TxRst1 : in std_logic;
            RxCommaMisalign0 : out std_logic;
            RxCommaMisalign1 : out std_logic;
            TxMkr0 : in std_logic;
            TxMkr1 : in std_logic;
            PRBSErrCnt0 : out std_logic_vector(15 downto 0 );
            UserClk2 : in std_logic;
            PRBSErrCnt1 : out std_logic_vector(15 downto 0 );
            Tx0_N : out std_logic;
            Tx0_P : out std_logic;
            Rx1_N : in std_logic;
            RxBufStatus0 : out std_logic_vector(2 downto 0 );
            RxBufStatus1 : out std_logic_vector(2 downto 0 );
            Rx1_P : in std_logic;
            RxDoubleComma0 : out std_logic;
            RxDoubleComma1 : out std_logic;
            RxDataTest0 : out std_logic_vector(15 downto 0 );
            RxDataTest1 : out std_logic_vector(15 downto 0 );
            RxBufRst0 : in std_logic;
            RxBufRst1 : in std_logic;
            RxComma0 : out std_logic;
            RxComma1 : out std_logic;
            IsAligned0 : out std_logic;
            IsAligned1 : out std_logic;
            RxStr0 : out std_logic;
            RxStr1 : out std_logic;
            AlignRx0 : in std_logic;
            AlignRx1 : in std_logic;
            Tx1_N : out std_logic;
            Tx1_P : out std_logic;
            TxData0 : in std_logic_vector(15 downto 0 );
            TxData1 : in std_logic_vector(15 downto 0 );
            PRBSRxEna0 : in std_logic_vector(2 downto 0 );
            Faults_DispError0 : out std_logic;
            PRBSRxEna1 : in std_logic_vector(2 downto 0 );
            Faults_DispError1 : out std_logic
            );
  end component;
  component BlockRamDP
      generic (
               A : NATURAL := 8;
               N : NATURAL := 16;
               RamStyle : STRING := "no_rw_check"
               );
      port (
            CLKA : in std_logic;
            WEA : in std_logic;
            ENA : in std_logic;
            ADDRA : in std_logic_vector(A - 1 downto 0 );
            DIA : in std_logic_vector(N - 1 downto 0 );
            DOA : out std_logic_vector(N - 1 downto 0 );
            CLKB : in std_logic;
            ADDRB : in std_logic_vector(A - 1 downto 0 );
            DOB : out std_logic_vector(N - 1 downto 0 )
            );
  end component;
  component PosEdge
      port (
            Clk : in std_logic;
            SigIn : in std_logic;
            PEdg : out std_logic
            );
  end component;
  component LEDConditioning
      generic (
               N : NATURAL := 16
               );
      port (
            Clk : in std_logic;
            Rst : in std_logic;
            SlowClk : in std_logic;
            LEDIn : in std_logic_vector(N - 1 downto 0 );
            LEDOut : out std_logic_vector(N - 1 downto 0 );
            WrStr : out std_logic
            );
  end component;
  component ClkDivider
      generic (
               N : NATURAL := 16
               );
      port (
            Clk : in std_logic;
            Rst : in std_logic;
            Sync : in std_logic := '0';
            Enable : in std_logic := '1';
            Divider : in std_logic_vector(N - 1 downto 0 );
            PosEdge : out std_logic;
            NegEdge : out std_logic;
            SlowClk : out std_logic
            );
  end component;
  component GTP_LinkTester
      generic (
               G_Header : std_logic_vector(31 downto 0 ) := X"4F627331";
               G_SourceID : std_logic_vector(31 downto 0 ) := X"00000000";
               G_Tags : std_logic_vector(31 downto 0 ) := X"00000000";
               G_DataSize : NATURAL := 3564;
               G_DataSeq : NATURAL := 4;
               G_CommaSeq : NATURAL := 1
               );
      port (
            Clk : in std_logic;
            Rst : in std_logic;
            Mkr : out std_logic;
            Data : out std_logic_vector(15 downto 0 );
            Str : out std_logic
            );
  end component;
  type visual_C171_intern_type is array (INTEGER range 2 - 1 downto 0 ) of
                                  std_logic_vector(3 - 1 downto 0 );
  type visual_C172_intern_type is array (INTEGER range 2 - 1 downto 0 ) of
                                  std_logic_vector(2 - 1 downto 0 );
  type visual_C173_intern_type is array (INTEGER range 2 - 1 downto 0 ) of
                                  std_logic_vector(3 - 1 downto 0 );
  type visual_C174_intern_type is array (INTEGER range 2 - 1 downto 0 ) of
                                  std_logic_vector(16 - 1 downto 0 );
  signal visual_C78_cur_state : std_logic_vector(26 - 1 downto 0 );
  signal visual_C78_next_state : std_logic_vector(26 - 1 downto 0 );
  signal visual_C78_next_count : std_logic_vector(26 - 1 downto 0 );
  signal visual_C78_en_state : std_logic_vector(26 - 1 downto 0 );
  signal visual_C0_cur_state : std_logic_vector(13 - 1 downto 0 );
  signal visual_C0_next_state : std_logic_vector(13 - 1 downto 0 );
  signal visual_C0_next_count : std_logic_vector(13 - 1 downto 0 );

  -- Start Configuration Specification
  -- ++ for all : DffxN use entity work.DffxN(DffxN);
  -- ++ for all : serdes_intfce_csr use entity work.serdes_intfce_csr(syn);
  -- ++ for all : PulseSync use entity work.PulseSync(PulseSync);
  -- ++ for all : serdes_intfce_eic use entity work.serdes_intfce_eic(syn);
  -- ++ for all : SRFF use entity work.SRFF(V1);
  -- ++ for all : ddr_sync_fifo use entity work.ddr_sync_fifo(ddr_sync_fifo_a);
  -- ++ for all : GTP_S6 use entity work.GTP_S6(GTP_S6);
  -- ++ for all : BlockRamDP use entity work.BlockRamDP(V1);
  -- ++ for all : PosEdge use entity work.PosEdge(V1);
  -- ++ for all : LEDConditioning use entity work.LEDConditioning(V1);
  -- ++ for all : ClkDivider use entity work.ClkDivider(V1);
  -- ++ for all : GTP_LinkTester use entity work.GTP_LinkTester(GTP_LinkTester);
  -- End Configuration Specification

begin

  cmp_sfp_los_dff: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => clk_wb_i,
              E => open,
              E1 => open,
              Rst => '0',
              D => sfp_los_i,
              Q => sfp_los
              );

  cmp_sfp_prsnt_dff: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => clk_wb_i,
              E => open,
              E1 => open,
              Rst => '0',
              D => sfp_prsnt_i,
              Q => sfp_prsnt
              );

  cmp_serdes_intfce_csr: serdes_intfce_csr
    port map (
              rst_n_i => rst_n_i,
              clk_sys_i => clk_wb_i,
              wb_adr_i => wb_csr_adr_i(3 downto 0),
              wb_dat_i => wb_csr_dat_i(31 downto 0),
              wb_dat_o => wb_csr_dat_o(31 downto 0),
              wb_cyc_i => wb_csr_cyc_i,
              wb_sel_i => wb_csr_sel_i(3 downto 0),
              wb_stb_i => wb_csr_stb_i,
              wb_we_i => wb_csr_we_i,
              wb_ack_o => wb_csr_ack_o,
              wb_stall_o => wb_csr_stall_o,
              serdes_intfce_ctrl_tx_dis_o => sfp_tx_disable_o,
              serdes_intfce_ctrl_prbs_ena_o => prbs_ena_wb,
              serdes_intfce_ctrl_tst_wr_ena_o => tst_wr_ena_wb,
              serdes_intfce_ctrl_cnt_clr_o => clr_prbs_err_cnt_wb,
              serdes_intfce_ctrl_mkr_type_o => mkr_type_wb,
              serdes_intfce_ctrl_led_test_o => led_test,
              serdes_intfce_ctrl_clr_faults_o => clr_faults,
              serdes_intfce_ctrl_gtp_rst_o => gtp_rst,
              serdes_intfce_ctrl_rx_rst_o => rx_rst,
              serdes_intfce_ctrl_tx_rst_o => tx_rst,
              serdes_intfce_ctrl_cdr_rst_o => cdr_rst,
              serdes_intfce_ctrl_align_o => align_rx_wb,
              serdes_intfce_ctrl_rx_buf_rst_o => rx_buf_rst,
              serdes_intfce_sta_sfp_los_i => sfp_los,
              serdes_intfce_sta_sfp_prsnt_i => sfp_prsnt,
              serdes_intfce_sta_fmc_prsnt_i => fmc_prsnt,
              serdes_intfce_sta_rx_stat_i => rx_buf_status_wb(2 downto 0),
              serdes_intfce_sta_rx_los_i => rx_los_wb(1 downto 0),
              serdes_intfce_sta_rx_clk_corr_i => rx_clk_corr_wb(2 downto 0),
              serdes_intfce_sta_aligned_i => gtp_aligned_wb,
              serdes_intfce_sta_fifo_full_i => fifo_full_latched,
              serdes_intfce_prbs_err_cnt_i => prbs_err_cnt_wb(15 downto 0),
              serdes_intfce_test_mem_addr_o => test_mem_addr_wb(12 downto 0),
              serdes_intfce_test_mem_dat_data_i => test_mem_dat_wb(15 downto 0),
              serdes_intfce_test_mem_dat_isk_i => test_mem_dat_wb(17 downto 16),
              serdes_intfce_test_mem_dat_marker_i => test_mem_dat_wb(18),
              serdes_intfce_line_rate_i => line_rate(31 downto 0),
              serdes_intfce_acq_page_size_o => acq_page_size(31 downto 0),
              serdes_intfce_acq_page_addr_i => acq_page_addr(31 downto 0),
              serdes_intfce_acq_marker_addr_i => acq_marker_addr(31 downto 0)
              );

  cmp_clr_err_cnt_sync: PulseSync
    port map (
              ClkIn => clk_wb_i,
              ClkOutHSout => open,
              PulseOut => clr_prbs_err_cnt,
              Rst => '0',
              PulseIn => clr_prbs_err_cnt_wb,
              ClkOut => clk_gtp_userclk2_i
              );

  cmp_align_rx_sync: PulseSync
    port map (
              ClkIn => clk_wb_i,
              ClkOutHSout => open,
              PulseOut => align_rx,
              Rst => '0',
              PulseIn => align_rx_wb,
              ClkOut => clk_gtp_userclk2_i
              );

  cmp_wr_ena_dff: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => clk_gtp_userclk2_i,
              E => open,
              E1 => open,
              Rst => '0',
              D => tst_wr_ena_wb,
              Q => tst_wr_ena
              );

  cmp_prbs_ena_dff: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => clk_gtp_userclk2_i,
              E => open,
              E1 => open,
              Rst => '0',
              D => prbs_ena_wb,
              Q => prbs_ena
              );

  cmp_serdes_intfce_eic: serdes_intfce_eic
    port map (
              rst_n_i => rst_n_i,
              clk_sys_i => clk_wb_i,
              wb_adr_i => wb_eic_adr_i(1 downto 0),
              wb_dat_i => wb_eic_dat_i(31 downto 0),
              wb_dat_o => wb_eic_dat_o(31 downto 0),
              wb_cyc_i => wb_eic_cyc_i,
              wb_sel_i => wb_eic_sel_i(3 downto 0),
              wb_stb_i => wb_eic_stb_i,
              wb_we_i => wb_eic_we_i,
              wb_ack_o => wb_eic_ack_o,
              wb_stall_o => wb_eic_stall_o,
              wb_int_o => wb_eic_int_o,
              irq_trig_i => irq_trig,
              irq_acq_i => irq_acq_wb
              );

  cmp_mkr_type_dff: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => clk_gtp_userclk2_i,
              E => open,
              E1 => open,
              Rst => '0',
              D => mkr_type_wb,
              Q => mkr_type
              );

  cmp_dio_prsnt_dff: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => clk_wb_i,
              E => open,
              E1 => open,
              Rst => '0',
              D => dio_prsnt_i,
              Q => fmc_prsnt
              );

  cmp_gtp_align_dff: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => clk_wb_i,
              E => open,
              E1 => open,
              Rst => '0',
              D => gtp_aligned,
              Q => gtp_aligned_wb
              );

  cmp_fifo_full_sync: PulseSync
    port map (
              ClkIn => clk_gtp_userclk2_i,
              ClkOutHSout => open,
              PulseOut => loc_fifo_full,
              Rst => '0',
              PulseIn => fifo_wr_full,
              ClkOut => clk_wb_i
              );

  cmp_fifo_full_srff: SRFF
    port map (
              Clk => clk_wb_i,
              Set => loc_fifo_full,
              Clr => clr_faults,
              Rst => open,
              Q => fifo_full_latched
              );

  cmp_ddr_sync_fifo: ddr_sync_fifo
    port map (
              rst => rst,
              wr_clk => clk_gtp_userclk2_i,
              rd_clk => clk_wb_i,
              din => fifo_din(17 downto 0),
              wr_en => ddr_str,
              rd_en => ddr_wr,
              dout => fifo_dout(35 downto 0),
              full => fifo_wr_full,
              empty => fifo_rd_empty,
              rd_data_count => open
              );

  cmp_gtp_tile: GTP_S6
    generic map (G_RATE => G_RATE
                 )
    port map (
              TxStr0 => z1,
              TxStr1 => tx_str,
              RstDone0 => open,
              RxLOS0 => open,
              RstDone1 => rst_done,
              RxLOS1 => rx_los(1 downto 0),
              Valid0 => z1,
              Valid1 => data_valid,
              PRBSTxEna0 => z3(2 downto 0),
              PRBSTxEna1 => prbs_ena_bus(2 downto 0),
              PRBSCntReset0 => z1,
              PRBSCntReset1 => clr_prbs_err_cnt,
              GTPRst => loc_gtp_rst,
              RxData0 => open,
              CDRRst0 => z1,
              CDRRst1 => cdr_rst,
              RxData1 => ddr_dat(15 downto 0),
              RxIsKTest0 => open,
              RxIsKTest1 => test_mem_dat(17 downto 16),
              Faults_NotInTable0 => open,
              Faults_NotInTable1 => open,
              RxClkCorCnt0 => open,
              RxClkCorCnt1 => rx_clk_corr(2 downto 0),
              GTPClk => clk_gtp_refclk_i,
              RxRst0 => z1,
              RxRst1 => rx_rst,
              UserClk => clk_gtp_userclk_i,
              Rx0_N => z1,
              Rx0_P => z1,
              TxRst0 => z1,
              TxRst1 => tx_rst,
              RxCommaMisalign0 => open,
              RxCommaMisalign1 => open,
              TxMkr0 => z1,
              TxMkr1 => tx_mkr,
              PRBSErrCnt0 => open,
              UserClk2 => clk_gtp_userclk2_i,
              PRBSErrCnt1 => prbs_err_cnt(15 downto 0),
              Tx0_N => open,
              Tx0_P => open,
              Rx1_N => sfp_rx_n_i,
              RxBufStatus0 => open,
              RxBufStatus1 => rx_buf_status(2 downto 0),
              Rx1_P => sfp_rx_p_i,
              RxDoubleComma0 => open,
              RxDoubleComma1 => is_double_comma,
              RxDataTest0 => open,
              RxDataTest1 => test_mem_dat(15 downto 0),
              RxBufRst0 => z1,
              RxBufRst1 => rx_buf_rst,
              RxComma0 => open,
              RxComma1 => is_comma,
              IsAligned0 => open,
              IsAligned1 => gtp_aligned,
              RxStr0 => open,
              RxStr1 => ddr_str,
              AlignRx0 => z1,
              AlignRx1 => loc_align_rx,
              Tx1_N => sfp_tx_n_o,
              Tx1_P => sfp_tx_p_o,
              TxData0 => z16(15 downto 0),
              TxData1 => tx_data(15 downto 0),
              PRBSRxEna0 => z3(2 downto 0),
              Faults_DispError0 => open,
              PRBSRxEna1 => prbs_ena_bus(2 downto 0),
              Faults_DispError1 => open
              );

  cmp_tst_ram: BlockRamDP
    generic map (A => 13,
                 N => 32,
                 RamStyle => "no_rw_check"
                 )
    port map (
              CLKA => clk_gtp_userclk2_i,
              WEA => tst_wr_ena,
              ENA => '1',
              ADDRA => test_mem_addr(12 downto 0),
              DIA => test_mem_dat(31 downto 0),
              DOA => open,
              CLKB => clk_wb_i,
              ADDRB => test_mem_addr_wb(12 downto 0),
              DOB => test_mem_dat_wb(31 downto 0)
              );

  cmp_sfp_ok_pedge: PosEdge
    port map (
              Clk => clk_gtp_userclk2_i,
              SigIn => sfp_ok,
              PEdg => sfp_ok_pos
              );

  cmp_prsnt_dff: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => clk_gtp_userclk2_i,
              E => open,
              E1 => open,
              Rst => rst_userclk2,
              D => loc_sfp_ok,
              Q => sfp_ok
              );

  cmp_align_srff: SRFF
    port map (
              Clk => clk_gtp_userclk2_i,
              Set => loc_align_0,
              Clr => loc_align_2,
              Rst => open,
              Q => loc_align_1
              );

  cmp_leddriver: LEDConditioning
    generic map (N => 2
                 )
    port map (
              Clk => clk_gtp_userclk2_i,
              Rst => '0',
              SlowClk => hz15,
              LEDIn => led_in_test(1 downto 0),
              LEDOut => led_out(1 downto 0),
              WrStr => open
              );

  cmp_khz1_div: ClkDivider
    generic map (N => 17
                 )
    port map (
              Clk => clk_gtp_userclk2_i,
              Rst => '0',
              Sync => '0',
              Enable => '1',
              Divider => khz1_div(16 downto 0),
              PosEdge => khz1,
              NegEdge => open,
              SlowClk => open
              );

  cmp_hz15_div: ClkDivider
    generic map (N => 8
                 )
    port map (
              Clk => clk_gtp_userclk2_i,
              Rst => '0',
              Sync => '0',
              Enable => khz1,
              Divider => hz15_div(7 downto 0),
              PosEdge => hz15,
              NegEdge => open,
              SlowClk => open
              );

  cmp_rst_sync: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => clk_gtp_userclk2_i,
              E => open,
              E1 => open,
              Rst => '0',
              D => rst,
              Q => rst_userclk2
              );

  cmp_rst_done_dff: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => clk_gtp_userclk2_i,
              E => open,
              E1 => open,
              Rst => '0',
              D => rst_done,
              Q => rst_done_syn
              );

  cmp_rst_done_pedge: PosEdge
    port map (
              Clk => clk_gtp_userclk2_i,
              SigIn => rst_done_syn,
              PEdg => rst_align
              );

  cmp_led_test_dff: DffxN
    generic map (N => 2
                 )
    port map (
              Clk => clk_gtp_userclk2_i,
              E => open,
              E1 => open,
              Rst => '0',
              D => led_test,
              Q => led_test_syn
              );

  cmp_linktester: GTP_LinkTester
    port map (
              Clk => clk_gtp_userclk2_i,
              Rst => rst_userclk2,
              Mkr => tx_mkr,
              Data => tx_data(15 downto 0),
              Str => tx_str
              );

  z1 <= '0';

  z3(2 downto 0) <= "000";

  z16(15 downto 0) <= X"0000";

  prbs_ena_bus <= "00" & prbs_ena;

  test_mem_addr(12 downto 0) <= (visual_C0_cur_state);


  visual_C0_next_state <= visual_C0_next_count;

  process (clk_gtp_userclk2_i)
  begin
  if (clk_gtp_userclk2_i'event and clk_gtp_userclk2_i = '1') then

       visual_C0_cur_state <= visual_C0_next_state;

  end if;
  end process;

  process (visual_C0_cur_state )
  variable plus_minus_one : unsigned(13 - 1 downto 0);

  begin
    plus_minus_one :=  "0000000000001" ;
    visual_C0_next_count <= std_logic_vector(unsigned(visual_C0_cur_state) +
   plus_minus_one);

  end process;

   loc_gtp_rst <= ( rst) or ( gtp_rst);

   loc_align_rx <= ( align_rx) or ( sfp_ins_align) or ( not_sync);

   loc_sfp_ok <= ( sfp_prsnt) and (not sfp_los);

   not_sync <= ( rx_los(1)) or ( rx_los(0));

   data_valid <= (not not_sync) and ( gtp_aligned) and ( sfp_ok);

  process (clk_gtp_userclk2_i)
  begin
  if (clk_gtp_userclk2_i'event and clk_gtp_userclk2_i = '1') then

      if (khz1 = '1') then
        sfp_ins_align <= (loc_align_2);
      end if;

  end if;
  end process;

  process (clk_gtp_userclk2_i)
  begin
  if (clk_gtp_userclk2_i'event and clk_gtp_userclk2_i = '1') then

      if (khz1 = '1') then
        loc_align_2 <= (loc_align_1);
      end if;

  end if;
  end process;

   loc_align_0 <= ( sfp_ok_pos) or ( rst_align);

  test_mem_dat(18) <= ddr_marker;

  test_mem_dat(31 downto 19) <= "0" & X"000";

  rst <= not (rst_n_i);

   c3_mkr <= ( ddr_str) and ( is_comma_or_double_1) and ( is_comma_2)
             and ( is_comma_3);

  process (clk_gtp_userclk2_i)
  begin
  if (clk_gtp_userclk2_i'event and clk_gtp_userclk2_i = '1') then
        is_comma_1 <= (is_comma);


  end if;
  end process;

  process (clk_gtp_userclk2_i)
  begin
  if (clk_gtp_userclk2_i'event and clk_gtp_userclk2_i = '1') then
        is_comma_2 <= (is_comma_1);


  end if;
  end process;

  process (clk_gtp_userclk2_i)
  begin
  if (clk_gtp_userclk2_i'event and clk_gtp_userclk2_i = '1') then
        is_comma_3 <= (is_comma_2);


  end if;
  end process;

  led_in(1) <= ddr_str;
  led_in(0) <= sfp_ok_n;

  led_red_o <= led_out(0);
  led_grn_o <= led_out(1);

  sfp_ok_n <= not (sfp_ok);

  khz1_div <= f_khz1_div(G_RATE);
  hz15_div <= X"43";

  process (dc_mkr , c3_mkr , mkr_type)
   begin
     case mkr_type is
       when '0' =>
         ddr_marker <=  dc_mkr;
       when others =>
         ddr_marker <=  c3_mkr;
     end case;
   end process;

  process (clk_gtp_userclk2_i)
  begin
  if (clk_gtp_userclk2_i'event and clk_gtp_userclk2_i = '1') then
        is_double_comma_1 <= (is_double_comma);


  end if;
  end process;

   dc_mkr <= ( ddr_str) and ( is_double_comma_1);

   is_comma_or_double_1 <= ( is_double_comma_1) or ( is_comma_1);

   led_in_test(1) <= ( led_test_syn) or ( led_in(1));
   led_in_test(0) <= ( led_test_syn) or ( led_in(0));

  irq_trig <= '0';

  sfp_prsnt_i <= not (sfp_prsnt_n_i);

  irq_o(1) <= irq_acq_wb;
  irq_o(0) <= irq_trig;

  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then

      if (irq_acq = '1') then
        cur_page_addr(25 downto 0) <= (ddr_addr_cnt(25 downto 0));
      end if;

  end if;
  end process;

  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then

      if (irq_acq = '1') then
        acq_page_addr(27 downto 2) <= (cur_page_addr(25 downto 0));
      end if;

  end if;
  end process;

  acq_page_addr(31 downto 28) <= "0000";

  acq_page_addr(1 downto 0) <= "00";

  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then

      if (ddr_frev_tag = '1') then
        cur_marker_addr(26 downto 0) <= (ddr_marker_addr(26 downto 0));
      end if;

  end if;
  end process;

   ddr_frev_tag <= ( loc_ddr_marker(1)) or ( loc_ddr_marker(0));

  ddr_marker_addr(26 downto 1) <= ddr_addr_cnt(25 downto 0);
  ddr_marker_addr(0) <= loc_ddr_marker(0);

  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then

      if (irq_acq = '1') then
        acq_marker_addr(27 downto 1) <= (cur_marker_addr(26 downto 0));
      end if;

  end if;
  end process;

  acq_marker_addr(0) <= '0';

  acq_marker_addr(31 downto 28) <= "0000";

  line_rate <= f_line_rate(G_RATE);

  dio_prsnt_i <= not (dio_prsnt_n_i);

  process (clk_wb_i)
    variable visual_C171_int : visual_C171_intern_type;
  begin
    if (clk_wb_i'event and clk_wb_i = '1') then
      for visual_C171_index in 1 to 2 - 1 loop
        visual_C171_int(2 - visual_C171_index) := visual_C171_int(2 -
   visual_C171_index - 1);
      end loop;
      visual_C171_int(0) := (rx_buf_status(2 downto 0));
     rx_buf_status_wb(2 downto 0) <= visual_C171_int(2 - 1);

    end if;
  end process;

  process (clk_wb_i)
    variable visual_C172_int : visual_C172_intern_type;
  begin
    if (clk_wb_i'event and clk_wb_i = '1') then
      for visual_C172_index in 1 to 2 - 1 loop
        visual_C172_int(2 - visual_C172_index) := visual_C172_int(2 -
   visual_C172_index - 1);
      end loop;
      visual_C172_int(0) := (rx_los(1 downto 0));
     rx_los_wb(1 downto 0) <= visual_C172_int(2 - 1);

    end if;
  end process;

  process (clk_wb_i)
    variable visual_C173_int : visual_C173_intern_type;
  begin
    if (clk_wb_i'event and clk_wb_i = '1') then
      for visual_C173_index in 1 to 2 - 1 loop
        visual_C173_int(2 - visual_C173_index) := visual_C173_int(2 -
   visual_C173_index - 1);
      end loop;
      visual_C173_int(0) := (rx_clk_corr(2 downto 0));
     rx_clk_corr_wb(2 downto 0) <= visual_C173_int(2 - 1);

    end if;
  end process;

  process (clk_wb_i)
    variable visual_C174_int : visual_C174_intern_type;
  begin
    if (clk_wb_i'event and clk_wb_i = '1') then
      for visual_C174_index in 1 to 2 - 1 loop
        visual_C174_int(2 - visual_C174_index) := visual_C174_int(2 -
   visual_C174_index - 1);
      end loop;
      visual_C174_int(0) := (prbs_err_cnt(15 downto 0));
     prbs_err_cnt_wb(15 downto 0) <= visual_C174_int(2 - 1);

    end if;
  end process;

  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then

      if (ddr_wr = '1') then
        wb_ddr_adr_o(25 downto 0) <= (ddr_addr_cnt(25 downto 0));
      end if;

  end if;
  end process;

  wb_ddr_adr_o(31 downto 26) <= "000000";

  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then

      if (ddr_wr = '1') then
        wb_ddr_dat_o(31 downto 0) <= (ddr_dat_swapped(31 downto 0));
      end if;

  end if;
  end process;

  wb_ddr_sel_o(3 downto 0) <= X"F";

  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then
        wb_ddr_stb_o <= (not fifo_rd_empty);


  end if;
  end process;

  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then
        wb_ddr_we_o <= '1';


  end if;
  end process;

  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then
        wb_ddr_cyc_o <= '1';


  end if;
  end process;

   masked_addr(25 downto 0) <= ( acq_page_size_m1(25 downto 0))
             and ( ddr_addr_cnt(25 downto 0));

  process (zero_25b , masked_addr)
   begin
      if ((zero_25b(25 downto 0)) = (masked_addr(25 downto 0))) then
        loc_irq_acq <= '1';
      else
        loc_irq_acq <= '0';
      end if;
  end process;

  zero_25b(25 downto 0) <= (others => '0');

   irq_acq <= ( loc_irq_acq) and ( ddr_wr);

  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then
    if (irq_acq_wb_en = '1') then
        irq_acq_wb <= (irq_acq);
    else
        irq_acq_wb <= '0';
    end if;
  end if;
  end process;


  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then
        acq_page_size_d <= acq_page_size;
  end if;
  end process;


  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then
    if (rst_n_i = '0') then
        irq_acq_wb_en <= '0';
    else
      if not (acq_page_size = acq_page_size_d) then
        irq_acq_wb_en <= '0';
      else
        if (irq_acq = '1') then
          irq_acq_wb_en <= '1';
        end if;
      end if;
    end if;
  end if;
  end process;


  ddr_wr <= (not fifo_rd_empty) and (not wb_ddr_stall_i);


  loc_ddr_marker(1) <= fifo_dout(35);
  loc_ddr_dat(31 downto 16) <= fifo_dout(33 downto 18);

  loc_ddr_marker(0) <= fifo_dout(17);
  loc_ddr_dat(15 downto 0)  <= fifo_dout(15 downto 0);

  ddr_dat_swapped(31 downto 16) <= loc_ddr_dat(15 downto 0);
  ddr_dat_swapped(15 downto 0) <= loc_ddr_dat(31 downto 16);

  fifo_din <= ddr_marker & '0' & ddr_dat;

  ddr_addr_cnt(25 downto 0) <= (visual_C78_cur_state);


  visual_C78_en_state <= visual_C78_next_count
                       when ddr_wr = '1'
                       else visual_C78_cur_state;

  visual_C78_next_state <= visual_C78_en_state;

  process (clk_wb_i)
  begin
  if (clk_wb_i'event and clk_wb_i = '1') then

       visual_C78_cur_state <= visual_C78_next_state;

  end if;
  end process;

  process (visual_C78_cur_state )
  variable plus_minus_one : unsigned(26 - 1 downto 0);

  begin
    plus_minus_one :=  "00000000000000000000000001" ;
    visual_C78_next_count <= std_logic_vector(unsigned(visual_C78_cur_state) +
   plus_minus_one);

  end process;

  acq_page_size_m1(25 downto 0) <= (std_logic_vector(unsigned((acq_page_size(27
   downto 2))) - 1));

  dio_oe_n_o(4 downto 0) <= "00000";

  dio_term_en_o(4 downto 0) <= "00000";

  dio_o(4) <= dio_out_4;
  dio_o(3) <= dio_out_3;
  dio_o(2) <= dio_out_2;
  dio_o(1) <= dio_out_1;
  dio_o(0) <= dio_out_0;

  dio_led_top_o <= '0';

  dio_led_bot_o <= '0';

  dio_out_4 <= ddr_str;

  dio_out_3 <= fifo_wr_full;

  dio_out_2 <= irq_acq_wb;

  dio_out_1 <= fifo_rd_empty;

  dio_out_0 <= wb_ddr_stall_i;
end serdes_intfce;


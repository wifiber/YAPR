----------------------------------------------------
----------------------------------------------------
-- THIS FILE WAS GENERATED BY VISUAL ELITE
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
----------------------------------------------------
----------------------------------------------------
-- GNU LESSER GENERAL PUBLIC LICENSE
----------------------------------------------------
-- This source file is free software; you can redistribute it and/or modify it
-- under the terms of the GNU Lesser General Public License as published by the
-- Free Software Foundation; either version 2.1 of the License, or (at your
-- option) any later version. This source is distributed in the hope that it
-- will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
-- of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-- See the GNU Lesser General Public License for more details. You should have
-- received a copy of the GNU Lesser General Public License along with this
-- source; if not, download it from http://www.gnu.org/licenses/lgpl-2.1.html
----------------------------------------------------
----------------------------------------------------
--
--  Library Name :  CommonVisual
--  Unit    Name :  PulseGen
--  Unit    Type :  Text Unit
--
------------------------------------------------------
------------------------------------------
------------------------------------------
-- Date        : Fri Jun 11 11:29:16 2010
--
-- Author      : Tom Levens <tom.levens@cern.ch>
--
-- Company     : CERN, BE-RF-FB
--
-- Description : Pulse generator (i.e. a monostable).
--
--               Variable bit length can be set with generic "N".
--
--               SlowClk pin can be left floating (default to '1') which runs
--               the pulse generator rate of Clk.
--
-- Changelog   : 20130117 (1.5)
--                 More robust retriggering!
--
--               20120113 (1.4)
--                 New method of generating SyncOut so that it's only
--                 generated at the start of each pulse if the pulse is
--                 longer than Duration (i.e. Trigger is held high).
--
--               20101015 (1.3)
--                 Fix to enable constant output by holding Trigger
--                 input high. Previously there would have been a 1
--                 clock delay between each output pulse in this case.
--                 Now there is a single pulse which will last until
--                 the Duration after the Trigger goes low.
--
--               20100906 (1.2)
--                 Fix to supress SyncOut if there are multiple
--                 triggers within the output pulse. Now only a single
--                 one is output at the start.
--
--               20100903 (1.1)
--                 Initial revision.
--
------------------------------------------
------------------------------------------

library ieee;
use ieee.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

entity  PulseGen  is
    generic (
        N           : natural := 16
    );

    port (
        Clk,
        Rst,
        Trigger     : in    std_logic;
        SlowClk     : in    std_logic   := '1';

        Duration    : in    std_logic_vector(N - 1 downto 0);

        PulseOut,
        SyncOut     : out   std_logic
    );
end;

-- EOF



------------------------------------------
------------------------------------------
-- Date        : Fri Jun 11 11:29:16 2010
--
-- Author      : Tom Levens <tom.levens@cern.ch>
--
-- Company     : CERN, BE-RF-FB
--
------------------------------------------
------------------------------------------

architecture  V1  of  PulseGen  is

signal      Loc_Trigger : std_logic;
signal      Loc_Pulse   : std_logic;
signal      Count       : unsigned(N - 1 downto 0);
signal      PrevPulse   : std_logic;

constant    C_Zero      : unsigned(N - 1 downto 0) := (others => '0');

begin
    process (Clk, Rst) begin
        if Rst = '1' then
            Count       <= C_Zero;
            Loc_Trigger <= '0';
            Loc_Pulse   <= '0';
        elsif rising_edge(Clk) then
            if SlowClk = '0' then
                if Trigger = '1' then
                    Loc_Trigger <= '1';
                end if;
            else -- SlowClk = '1'
                if Loc_Trigger = '1' or Trigger = '1' then
                    Loc_Pulse   <= '1';
                    Count       <= unsigned(Duration) - 1;
                    Loc_Trigger <= '0';
                elsif Count = C_Zero then
                    Loc_Pulse <= '0';
                else
                    Count       <= Count - 1;
                    Loc_Pulse   <= '1';
                end if;
            end if;
        end if;
    end process;

    process (Clk, Rst) begin
        if Rst = '1' then
            PrevPulse <= '0';
        elsif rising_edge(Clk) then
            PrevPulse <= Loc_Pulse;
        end if;
    end process;

    SyncOut  <= '1' when (Loc_Pulse = '1' and PrevPulse = '0') else '0';
    PulseOut <= Loc_Pulse;
end;

--EOF




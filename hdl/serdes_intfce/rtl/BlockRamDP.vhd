----------------------------------------------------
----------------------------------------------------
-- THIS FILE WAS GENERATED BY VISUAL ELITE
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
----------------------------------------------------
----------------------------------------------------
-- GNU LESSER GENERAL PUBLIC LICENSE
----------------------------------------------------
-- This source file is free software; you can redistribute it and/or modify it
-- under the terms of the GNU Lesser General Public License as published by the
-- Free Software Foundation; either version 2.1 of the License, or (at your
-- option) any later version. This source is distributed in the hope that it
-- will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
-- of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-- See the GNU Lesser General Public License for more details. You should have
-- received a copy of the GNU Lesser General Public License along with this
-- source; if not, download it from http://www.gnu.org/licenses/lgpl-2.1.html
----------------------------------------------------
----------------------------------------------------
--
--  Library Name :  CommonVisual
--  Unit    Name :  BlockRamDP
--  Unit    Type :  Text Unit
--
------------------------------------------------------
------------------------------------------
------------------------------------------
-- Date        : Wed Oct 27 09:52:26 2010
--
-- Author      : Tom Levens <tom.levens@cern.ch>
--
-- Company     : CERN, BE-RF-FB
--
-- Description : Dual port, block RAM.
--               Single input port (A).
--               Dual output ports (A,B) with separate clocks.
--
-- Changelog   : 20121003 (1.1)
--                 Initial revision
--
------------------------------------------
------------------------------------------

library ieee;
use ieee.STD_LOGIC_1164.all;
use ieee.std_logic_unsigned.all;

entity  BlockRamDP  is
    generic (
        A           : natural := 8;             -- Address bus width. RAM will be 2^A in size.
        N           : natural := 16;            -- Data bus width. Should be 1, 2, 4, 8, ...
        RamStyle    : string  := "no_rw_check"  -- "syn_ramstyle" attribute.
    );

    port (
        CLKA,
        WEA,
        ENA     : in    std_logic;

        ADDRA   : in    std_logic_vector(A-1 downto 0);
        DIA     : in    std_logic_vector(N-1 downto 0);
        DOA     : out   std_logic_vector(N-1 downto 0);

        CLKB    : in    std_logic;

        ADDRB   : in    std_logic_vector(A-1 downto 0);
        DOB     : out   std_logic_vector(N-1 downto 0)
    );
end;

-- EOF


------------------------------------------
------------------------------------------
-- Date        : Wed Oct 27 09:52:26 2010
--
-- Author      : Tom Levens <tom.levens@cern.ch>
--
-- Company     : CERN, BE-RF-FB
--
------------------------------------------
------------------------------------------

architecture  V1  of  BlockRamDP  is

-- RAM data type. Array of 256 words.
subtype ramelement is std_logic_vector(N-1 downto 0);
type ram_t is array (0 to 2**A-1) of ramelement;

-- Instance of RAM array.
signal TheRam : ram_t;

-- Registers to hold address for ports.
signal Loc_ADDRA : std_logic_vector(A-1 downto 0);
signal Loc_ADDRB : std_logic_vector(A-1 downto 0);

-- Tell Synplify what kind of RAM to create.
attribute syn_ramstyle : string;
attribute syn_ramstyle of TheRam : signal is RamStyle;

begin
    -- PORT A (Read/Write).
    process (CLKA) begin
        if rising_edge(CLKA) then
            Loc_ADDRA <= ADDRA;
            if ENA = '1' and WEA = '1' then
                TheRam(conv_integer(ADDRA)) <= DIA;
            end if;
        end if;
    end process;
    DOA <= TheRam(conv_integer(Loc_ADDRA));

    -- PORT B (Read Only).
    process (CLKB) begin
        if rising_edge(CLKB) then
            Loc_ADDRB <= ADDRB;
        end if;
    end process;
    DOB <= TheRam(conv_integer(Loc_ADDRB));
end;

--EOF



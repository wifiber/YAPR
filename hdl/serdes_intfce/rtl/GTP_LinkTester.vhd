----------------------------------------------------
----------------------------------------------------
-- THIS FILE WAS GENERATED BY VISUAL ELITE
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
----------------------------------------------------
----------------------------------------------------
-- GNU LESSER GENERAL PUBLIC LICENSE
----------------------------------------------------
-- This source file is free software; you can redistribute it and/or modify it
-- under the terms of the GNU Lesser General Public License as published by the
-- Free Software Foundation; either version 2.1 of the License, or (at your
-- option) any later version. This source is distributed in the hope that it
-- will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
-- of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-- See the GNU Lesser General Public License for more details. You should have
-- received a copy of the GNU Lesser General Public License along with this
-- source; if not, download it from http://www.gnu.org/licenses/lgpl-2.1.html
----------------------------------------------------
----------------------------------------------------
--
--  Library Name :  GTP
--  Unit    Name :  GTP_LinkTester
--  Unit    Type :  Block Diagram
--
------------------------------------------------------

library ieee;
use ieee.STD_LOGIC_1164.all;
use ieee.NUMERIC_STD.all;
entity GTP_LinkTester is
  generic (
           G_Header : std_logic_vector(31 downto 0 ) := X"4F627331";--  OBS1
           G_SourceID : std_logic_vector(31 downto 0 ) := X"00000000";
           G_Tags : std_logic_vector(31 downto 0 ) := X"00000000";
           G_DataSize : NATURAL := 3564;
           G_DataSeq : NATURAL := 4;
           G_CommaSeq : NATURAL := 1
           );
  port (
        Clk : in std_logic;
        Rst : in std_logic;
        Mkr : out std_logic;
        Data : out std_logic_vector(15 downto 0 );
        Str : out std_logic
        );


end GTP_LinkTester;


use work.all;
architecture GTP_LinkTester of GTP_LinkTester is

  signal DataOut : std_logic_vector(15 downto 0 );
  signal Turn : std_logic_vector(31 downto 0 );
  signal Loc_Data : std_logic_vector(15 downto 0 );
  signal CRCDinMSB : std_logic_vector(15 downto 8 );
  signal BlockSize : std_logic_vector(31 downto 0 );
  signal Header : std_logic_vector(31 downto 0 );
  signal Loc_Str : std_logic;
  signal CRCDinRot : std_logic_vector(15 downto 0 );
  signal CRCDoutRot : std_logic_vector(31 downto 0 );
  signal CRCDinLSB : std_logic_vector(7 downto 0 );
  signal CRCDoutRotN : std_logic_vector(31 downto 0 );
  signal CRCDin : std_logic_vector(15 downto 0 );
  signal HeadCnt : std_logic_vector(4 downto 0 );
  signal LinkData : std_logic_vector(15 downto 0 );
  signal Tags : std_logic_vector(31 downto 0 );
  signal CRCEna : std_logic;
  signal AddCRC : std_logic;
  signal CRCDout : std_logic_vector(31 downto 0 );
  signal SourceID : std_logic_vector(31 downto 0 );
  signal LinkStr : std_logic;
  signal Loc_Mkr : std_logic;
  component GTP_LinkEncoder
      port (
            HeadCnt : in std_logic_vector(4 downto 0 );
            DataOut : out std_logic_vector(15 downto 0 );
            Str : out std_logic;
            Mkr : out std_logic;
            LinkData : in std_logic_vector(15 downto 0 );
            LinkStr : in std_logic;
            Header : in std_logic_vector(31 downto 0 );
            SourceID : in std_logic_vector(31 downto 0 );
            BlockSize : in std_logic_vector(31 downto 0 );
            Turn : in std_logic_vector(31 downto 0 );
            Tags : in std_logic_vector(31 downto 0 );
            CRC : in std_logic_vector(31 downto 0 );
            AddCRC : out std_logic
            );
  end component;
  component CRC32_D16
      generic (
               InitVal : std_logic_vector(31 downto 0 ) := (others  => '0')
               );
      port (
            Clk : in std_logic;
            Rst : in std_logic;
            Din : in std_logic_vector(15 downto 0 );
            DinEna : in std_logic;
            CRC : out std_logic_vector(31 downto 0 );
            NxtCRC : out std_logic_vector(31 downto 0 );
            Clear : in std_logic
            );
  end component;
  component BusRotate
      port (
            Din : in std_logic_vector;
            DinRot : out std_logic_vector
            );
  end component;
  component GTP_LinkTestSeq
      generic (
               G_HeaderWords : NATURAL := 22;
               G_DataSeq : NATURAL := 4;
               G_CommaSeq : NATURAL := 1;
               G_DataSize : NATURAL := 3564
               );
      port (
            Clk : in std_logic;
            Rst : in std_logic;
            HeadCount : out std_logic_vector(4 downto 0 );
            LinkData : out std_logic_vector(15 downto 0 );
            LinkStr : out std_logic
            );
  end component;
  signal visual_C8_cur_state : std_logic_vector(32 - 1 downto 0 );
  signal visual_C8_next_state : std_logic_vector(32 - 1 downto 0 );
  signal visual_C8_next_count : std_logic_vector(32 - 1 downto 0 );
  signal visual_C8_en_state : std_logic_vector(32 - 1 downto 0 );

  -- Start Configuration Specification
  -- ++ for all : GTP_LinkEncoder use entity work.GTP_LinkEncoder(
  -- ++ GTP_LinkEncoder);
  -- ++ for all : CRC32_D16 use entity work.CRC32_D16(V1);
  -- ++ for all : BusRotate use entity work.BusRotate(V1);
  -- ++ for all : GTP_LinkTestSeq use entity work.GTP_LinkTestSeq(
  -- ++ GTP_LinkTestSeq);
  -- End Configuration Specification

begin

  C_LinkEncoder: GTP_LinkEncoder
    port map (
              HeadCnt => HeadCnt(4 downto 0),
              DataOut => DataOut(15 downto 0),
              Str => Loc_Str,
              Mkr => Loc_Mkr,
              LinkData => LinkData(15 downto 0),
              LinkStr => LinkStr,
              Header => Header(31 downto 0),
              SourceID => SourceID(31 downto 0),
              BlockSize => BlockSize(31 downto 0),
              Turn => Turn(31 downto 0),
              Tags => Tags(31 downto 0),
              CRC => CRCDoutRotN(31 downto 0),
              AddCRC => AddCRC
              );

  C_CRC: CRC32_D16
    generic map (InitVal => (others  => '1')
                 )
    port map (
              Clk => Clk,
              Rst => Rst,
              Din => CRCDinRot(15 downto 0),
              DinEna => CRCEna,
              CRC => CRCDout(31 downto 0),
              NxtCRC => open,
              Clear => Loc_Mkr
              );

  cmp_busrotate_next_crc: BusRotate
    port map (
              Din => CRCDout(31 downto 0),
              DinRot => CRCDoutRot(31 downto 0)
              );

  cmp_busrotate_tx_data_msb: BusRotate
    port map (
              Din => CRCDinMSB(15 downto 8),
              DinRot => CRCDinRot(15 downto 8)
              );

  cmp_busrotate_tx_data_lsb: BusRotate
    port map (
              Din => CRCDinLSB(7 downto 0),
              DinRot => CRCDinRot(7 downto 0)
              );

  C_LinkTestSeq: GTP_LinkTestSeq
    generic map (G_HeaderWords => 22,
                 G_DataSeq => G_DataSeq,
                 G_CommaSeq => G_CommaSeq,
                 G_DataSize => G_DataSize
                 )
    port map (
              Clk => Clk,
              Rst => Rst,
              HeadCount => HeadCnt(4 downto 0),
              LinkData => LinkData(15 downto 0),
              LinkStr => LinkStr
              );

  process (Clk)
  begin
  if (Clk'event and Clk = '1') then
        Loc_Data(15 downto 0) <= (DataOut(15 downto 0));


  end if;
  end process;

  process (Clk)
  begin
  if (Clk'event and Clk = '1') then
        Str <= (Loc_Str);


  end if;
  end process;

  process (Clk)
  begin
  if (Clk'event and Clk = '1') then
        Mkr <= (Loc_Mkr);


  end if;
  end process;

  Header(31 downto 0) <= G_Header;

  SourceID(31 downto 0) <= G_SourceID;

  Tags(31 downto 0) <= G_Tags;

  BlockSize(31 downto 0) <= std_logic_vector(to_unsigned(G_DataSize*2, 32));

  Turn(31 downto 0) <= (visual_C8_cur_state);


  visual_C8_en_state <= visual_C8_next_count
                       when Loc_Mkr = '1'
                       else visual_C8_cur_state;

  visual_C8_next_state <= visual_C8_en_state;

  process (Clk , Rst)
  begin
   if (Rst = '1') then
      visual_C8_cur_state <= (others => '0');
   elsif (Clk'event and Clk = '1') then

       visual_C8_cur_state <= visual_C8_next_state;

  end if;
  end process;

  process (visual_C8_cur_state )
  variable plus_minus_one : unsigned(32 - 1 downto 0);

  begin
    plus_minus_one :=  "00000000000000000000000000000001" ;
    visual_C8_next_count <= std_logic_vector(unsigned(visual_C8_cur_state) +
   plus_minus_one);

  end process;

   CRCEna <= ( Loc_Str) and (not AddCRC);

  CRCDoutRotN(31 downto 0) <= not (CRCDoutRot(31 downto 0));

  Data(15 downto 0) <= Loc_Data(15 downto 0);

  CRCDin(15 downto 0) <= DataOut(15 downto 0);

  CRCDinMSB(15 downto 8) <= CRCDin(7 downto 0);

  CRCDinLSB(7 downto 0) <= CRCDin(15 downto 8);
end GTP_LinkTester;


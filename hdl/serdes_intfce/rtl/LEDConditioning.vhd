----------------------------------------------------
----------------------------------------------------
-- THIS FILE WAS GENERATED BY VISUAL ELITE
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
----------------------------------------------------
----------------------------------------------------
-- GNU LESSER GENERAL PUBLIC LICENSE
----------------------------------------------------
-- This source file is free software; you can redistribute it and/or modify it
-- under the terms of the GNU Lesser General Public License as published by the
-- Free Software Foundation; either version 2.1 of the License, or (at your
-- option) any later version. This source is distributed in the hope that it
-- will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
-- of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
-- See the GNU Lesser General Public License for more details. You should have
-- received a copy of the GNU Lesser General Public License along with this
-- source; if not, download it from http://www.gnu.org/licenses/lgpl-2.1.html
----------------------------------------------------
----------------------------------------------------
--
--  Library Name :  CommonVisual
--  Unit    Name :  LEDConditioning
--  Unit    Type :  Text Unit
--
------------------------------------------------------
------------------------------------------
------------------------------------------
-- Date        : Wed Nov 23 14:49:16 2011
--
-- Author      : Tom Levens <tom.levens@cern.ch>
--
-- Company     : CERN, BE-RF-FB
--
-- Description : N-bit pulse stretcher and edge detector.
--
------------------------------------------
------------------------------------------

library ieee;
use ieee.STD_LOGIC_1164.all;

entity  LEDConditioning  is
    generic (
        N       : natural   := 16
    );

    port (
        Clk,
        Rst     : in    std_logic;

        SlowClk : in    std_logic;

        LEDIn   : in    std_logic_vector(N-1 downto 0);

        LEDOut  : out   std_logic_vector(N-1 downto 0);

        WrStr   : out   std_logic
    );
end;

-- EOF



------------------------------------------
------------------------------------------
-- Date        : Wed Nov 23 14:51:13 2011
--
-- Author      : Tom Levens <tom.levens@cern.ch>
--
-- Company     : CERN, BE-RF-FB
--
------------------------------------------
------------------------------------------

architecture  V1  of  LEDConditioning  is

    signal      DQ      : std_logic_vector(N-1 downto 0);
    signal      NextDQ  : std_logic_vector(N-1 downto 0);
    signal      PrevDQ  : std_logic_vector(N-1 downto 0);
    signal      NEdg    : std_logic_vector(N-1 downto 0);
    signal      PEdg    : std_logic_vector(N-1 downto 0);
    signal      SR_N    : std_logic_vector(N-1 downto 0);
    signal      SR_P    : std_logic_vector(N-1 downto 0);
    signal      Edge    : std_logic_vector(N-1 downto 0);

    subtype     Word2 is std_logic_vector(1 downto 0);
    type        BusWord2 is array (N-1 downto 0) of Word2;
    signal      NextIn  : BusWord2;

    constant    C_Zero  : std_logic_vector(N-1 downto 0) := (others => '0');

    component  NegEdge
    port( Clk,SigIn : in  std_logic;
          NEdg      : out std_logic);
    end component;

    component  PosEdge
    port( Clk,SigIn : in  std_logic;
          PEdg      : out std_logic);
    end component;

    component SRFF
    port (Clk,Set,Clr: in std_logic;
          Rst : in std_logic:='0'; --Reset active high, port can be left open is unused
          Q: out std_logic);
    end component;

begin

    MainLoop: for I in 0 to N-1 generate begin

        -- Falling edge detection on inputs
        NegE: NegEdge
        port map( Clk => Clk,
                  SigIn => LEDIn(I),
                  NEdg => NEdg(I));

        -- Rising edge detection on inputs
        PosE: PosEdge
        port map( Clk => Clk,
                  SigIn => LEDIn(I),
                  PEdg => PEdg(I));

        -- SRFF to capture falling edge, cleared by SlowClk.
        SRFF_N: SRFF
        port map( Clk => Clk,
                  Set => NEdg(I),
                  Clr => SlowClk,
                  Rst => Rst,
                  Q => SR_N(I));

        -- SRFF to capture rising edge, cleared by SlowClk.
        SRFF_P: SRFF
        port map( Clk => Clk,
                  Set => PEdg(I),
                  Clr => SlowClk,
                  Rst => Rst,
                  Q => SR_P(I));


        -- Combinatorial logic to compute NextDQ.
        NextIn(I) <= SR_N(I)&SR_P(I);
        LookupT: process(NextIn, LEDIn(I), DQ(I)) begin
            case NextIn(I) is
            when "00" => -- No edge
                NextDQ(I) <= LEDIn(I);
            when "01" => -- Pos. edge
                NextDQ(I) <= '1';
            when "10" => -- Neg. edge
                NextDQ(I) <= '0';
            when "11" => -- Both edges
                NextDQ(I) <= not DQ(I); -- Toggle
            when others =>
                null;
            end case;
        end process LookupT;


        -- DQ Latch with SlowClk as enable.
        DQFF: process (Clk, Rst) begin
            if Rst = '1' then
                DQ(I) <= '0';
            elsif rising_edge(Clk) then
                if SlowClk = '1' then
                    DQ(I) <= NextDQ(I);
                end if;
            end if;
        end process DQFF;

        -- Store previous value of DQ for edge detection.
        PrevDQFF: process (Clk, Rst) begin
            if Rst = '1' then
                PrevDQ(I) <= '0';
            elsif rising_edge(Clk) then
                PrevDQ(I) <= DQ(I);
            end if;
        end process PrevDQFF;

        Edge(I) <= DQ(I) xor PrevDQ(I);

    end generate MainLoop;

    -- LED output.
    LEDOut <= DQ;

    -- Edge detection.
    WrStr  <= '0' when Edge = C_Zero else '1';

end;

-- EOF



